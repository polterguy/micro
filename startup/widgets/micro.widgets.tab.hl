
/*
 * Creates the tab extension widget.
 *
 * A tab widget needs at least one child of type [view]. Each view becomes
 * a single tab in the tab widget. Each view must have at least a [name] and a [widgets] collection.
 *
 * Unless you wish to override the default CSS class, you should also at the very least supply a [class]
 * property for your [micro.widgets.tab] widget with the value of "micro-tab".
 */
create-event:micro.widgets.tab

  /*
   * Used to separate parameters from the rest of the event.
   */
  .signal

  /*
   * Databinding the buttons of our tab.
   */
  apply:x:/../*/return/**/widgets/=buttons
    src:x:/@.signal/--/<-/view/*/name
    template
      button
        {innerValue}:x:?value
        onclick

          /*
           * Making sure we set all other views to invisible, 
           * and the currently clicked button's view to visible.
           */
          {_name}:x:?value
          p5.web.widgets.find-first-ancestor:x:/../*/_event?value
            _tab
          p5.web.widgets.find:x:/@p5.web.widgets.find-first-ancestor/*/*?value
            _name
          set-widget-property:x:/@p5.web.widgets.find/*/*?value
            visible:false
          p5.web.widgets.find:x:/@p5.web.widgets.find-first-ancestor/*/*?value
            _name:x:/@_name?value
          set-widget-property:x:/@p5.web.widgets.find/*/*?value
            visible:true

          /*
           * Removing active state from all buttons, and adding for currently clicked afterwards.
           */
          p5.web.widgets.find-first-like:x:/@p5.web.widgets.find-first-ancestor/*/*?value
            class:micro-widgets-tab-buttons
          micro.css.delete:x:/@p5.web.widgets.find-first-like/*/*?value
            class:micro-widgets-tab-display-buttons
          p5.web.widgets.get-children:x:/@p5.web.widgets.find-first-like/*/*?value
          micro.css.delete:x:/@p5.web.widgets.get-children/*/*?value
            class:micro-widgets-tab-active
          set-widget-property:x:/../*/_event?value
            class:micro-widgets-tab-active

  /*
   * Databinding the views of our tab.
   */
  for-each:x:/@.signal/--/<-/view/*/widgets
    add:x:/+3/*/*
      src:x:/@_dp/#/./*(!/widgets!/name)
    add:x:/+2/*/*/*/widgets
      src:x:/@_dp/#/*
    eval-x:x:/+/*/*/*/_name
    add:x:/../*/return/**/widgets/=views
      src
        container
          _name:x:/@_dp/#/./*/name?value
          visible:false
          widgets

  /*
   * Adding the rest of the arguments into return widget.
   */
  add:x:/../*/return/*/container
    src:x:/@.signal/--(!/view)

  /*
   * Making sure our first view becomes visible.
   */
  set:x:/../*/return/**/widgets/=views/0/*/visible

  /*
   * Making sure our first view's button has the 'active' CSS class.
   */
  add:x:/../*/return/**/widgets/=buttons/0
    src
      class:micro-widgets-tab-active

  /*
   * Adding "hamburger toggle button".
   */
  add:x:/../*/return/**/widgets/=buttons
    src
      button
        class:micro-widgets-tab-hamburger
        innerValue:=
        onclick

          /*
           * Retrieving parent widget, and toggling display CSS class.
           */
          p5.web.widgets.get-parent:x:/../*/_event?value
          micro.css.toggle:x:/-/*/*?value
            class:micro-widgets-tab-display-buttons

  /*
   * Returning widget to caller.
   */
  return
    container
      _tab
      widgets
        container
          class:micro-widgets-tab-buttons
          widgets:buttons
        container
          class:micro-widgets-tab-views
          widgets:views
