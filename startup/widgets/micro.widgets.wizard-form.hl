/*
 * Creates the wizard form extension widget.
 *
 * This extension widget allows you to create 'form-widgets' declaratively, by simply adding a collection of
 * types of widgets, and decorate some of their properties according to what widgets you'd like to create.
 *
 * Supported arguments are as follows.
 *
 * - [class] - Sets the root class for your form.
 * - [text] - Creates a text input widget, requires [info] argument.
 * - [textarea] - Creates a textarea type of widget, requires [info] argument.
 * - [checkbox] - Creates a checkbox input widget, requires [info] argument.
 * - [select] - Creates a select dropdown widget, requires [info] argument.
 * - [radio-group] - Creates a group of radio buttons
 *
 * If you add a [style] or [class] argument, these will be handled specially, as the style and class attribute of the main root widget.
 *
 * The [select] and [radio-group] widgets, requires an [options] collection, being the options the user can legally select.
 * The [options] arguments is a name/value collection, where the name becomes the displayed string, and the value becomes the value for
 * the selected option. All arguments beneath an [option] argument, becomes appended automatically into the specific option element, allowing
 * you to add up for instance a [checked] or [selected] argument, to a specific option, to make sure it is by default selected.
 *
 * All other arguments to all other widgets are automatically added as arguments into the specific widget, allowing you to add for instance a
 * [value] to a [text] widget, specifying an initial value for it, or a [checked] argument to a [checkbox] specifying it is initially checked, etc.
 *
 * You can serialize the form manually if you wish, but you can also use the [micro.form.serialize] event to retrieve all values of
 * a specific form in your page.
 *
 * Notice, when used in combination with [micro.form.serialize], you can add a [.data-field] to most widgets, to avoid using the widget ID
 * as a data-field name, for cases when you have multiple form widgets with unpredictable names on your form.
 * If you do, you need to add a [.data-value] for every [radio-group] option element. The [.data-field] will be what is returned for the specific
 * widget during invocation of [micro.form.serialize].
 *
 * You don't need to add a [.data-value] for your select widget's option elements, since these values will be taken from the option element's value,
 * and not its ID, which anyways can have multiple similar values globally on your form.
 *
 * Notice, you can use [micro.widgets.wizard-form.value] passing in the ID of your wizard form, to retrieve its values.
 */
create-event:micro.widgets.wizard-form

  /*
   * Used to separate parameters from the rest of the event.
   */
  .signal

  /*
   * Looping through all arguments and handling them accordingly.
   */
  for-each:x:/@.signal/--/<-(!/_arg!/style!/class)

    /*
     * Figuring out what the current argument is.
     */
    switch:x:/@_dp/#?name

      case:class

        /*
         * Class declaration for main widget.
         */
        add:x:/../*/return/*/container
          src:x:/@_dp/#

      case:text

        /*
         * Single line text input.
         */
        eval-x:x:/+2/**
        add:x:/+/**/input
          src:x:/@_dp/#/*(!/info)
        add:x:/../*/return/*/container/*/widgets
          src
            div
              class:strip fill
              widgets
                label
                  innerValue:x:/@_dp/#/*/info?value
                  for:x:/@_dp/#?value
                input:x:/@_dp/#?value
                  type:text
                  placeholder:{0} ...
                    :x:/@_dp/#/*/info?value

      case:textarea

        /*
         * Multiple lines text input.
         */
        eval-x:x:/+2/**
        add:x:/+/**/literal
          src:x:/@_dp/#/*(!/info)
        add:x:/../*/return/*/container/*/widgets
          src
            literal:x:/@_dp/#?value
              element:textarea
              class:fill
              placeholder:x:/@_dp/#/*/info?value
              title:x:/@_dp/#/*/info?value
              rows:5

      case:select

        /*
         * Select widget.
         */
        .exe
          return:x:/@_dn/#/*
        eval-x:x:/+3/**
        add:x:/+2/**/select
          src:x:/@_dp/#/*(!/info!/options)
        apply:x:/+/**/select/*/widgets
          src:x:/@_dp/#/*/options/*
          template
            option
              {value}:x:?value
              {innerValue}:x:?name
              {@eval}:x:/@.exe
        add:x:/../*/return/*/container/*/widgets
          src
            div
              class:strip fill
              widgets
                label
                  innerValue:x:/@_dp/#/*/info?value
                select:x:/@_dp/#?value
                  widgets

      case:radio-group

        /*
         * Radio group widgets.
         */
        if:x:/@_dp/#?value
          not
          set:x:/@_dp/#?value
            p5.types.guid.new
        for-each:x:/@_dp/#/*/options/*
          if:x:/@_dp/#?value
            not
            set:x:/@_dp/#?value
              p5.types.guid.new
        .exe
          return:x:/@_dn/#/*
        add:x:/@_dp/#/*/options/*
          src:x:/@_dp/#/*/\.data-field
        add:x:/+/**/{input}
          src:"name:{0}"
            :x:/@_dp/#?value
        apply:x:/+/*/src
          src:x:/@_dp/#/*/options/*
          template
            label
              widgets
                span
                  {innerValue}:x:?name
                {input}:x:?value
                  type:radio
                  {value}:x:?value
                  {@eval}:x:/@.exe
        add:x:/../*/return/*/container/*/widgets
          src

      case:checkbox

        /*
         * Checkbox widget.
         */
        if:x:/@_dp/#?value
          not
          set:x:/@_dp/#?value
            p5.types.guid.new
        eval-x:x:/+2/**
        add:x:/+/**/input
          src:x:/@_dp/#/*(!/info)
        add:x:/../*/return/*/container/*/widgets
          src
            label
              class:input-label
              widgets
                span
                  innerValue:x:/@_dp/#/*/info?value
                input:x:/@_dp/#?value
                  type:checkbox

      case:br

        /*
         * Carriage return, slightly special.
         */
        if:x:/@_dp/#/*/style
          not
          // Defaulting some sane style, to make sure we create a hard break.
          add:x:/./+2/*/*
            src
              style:"clear:both;"
        add:x:/+/*/*
          src:x:/@_dp/#/*
        add:x:/../*/return/*/container/*/widgets
          src
            br

      case:collection

        /*
         * A grouping of widgets, creating a wrapper container element, and iterating its
         * [widgets] collection.
         */
        add:x:/+
          src:x:/@_dp/#/*(!/widgets)|/@_dp/#/*/widgets/*
        micro.widgets.wizard-form
        add:x:/../*/return/*/container/*/widgets
          src:x:/@micro.widgets.wizard-form/*
        set:x:/../*/return/*/container/*/widgets/0/-?value
          src:x:/@_dp/#?value

      default

        /*
         * Some arbitrary HTML widget not natively supported, or possible some
         * arbitrary attribute.
         */
        if:x:/@_dp/#?name
          ~:.
          or:x:/@_dp/#?name
            =:visible
          add:x:/../*/return/*/container
            src:x:/@_dp/#
        else
          add:x:/../*/return/*/container/*/widgets
            src:x:/@_dp/#

  /*
   * Returning widget to caller, making sure we add [style] and [class] arguments.
   */
  add:x:/../*/return/*/container
    src:x:/../*(/class|/style)
  return
    container
      events

        /*
         * Serializes the form, and returns its values, using [micro.form.serialize]
         */
        micro.widgets.wizard-form.value

          /*
           * Verifying requested form is ID of current.
           */
          if:x:/../*/_arg?value
            =:x:/../*/_event?value

            /*
             * Using [micro.form.serialize] to retrieve value of form
             * and returning to caller.
             */
            micro.form.serialize:x:/../*/_arg?value
            return:x:/@micro.form.serialize/*

      widgets
