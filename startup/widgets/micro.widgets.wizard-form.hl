
/*
 * Creates the __[micro.widgets.wizard-form]__ extension widget.
 */

/*
 * This widget allows you to create _'form-widgets'_ declaratively, by simply
 * adding a collection of types of widgets, and decorate some of their properties
 * according to what widgets you'd like to create. Supported arguments are as follows.
 *
 * - __[text]__ - Creates a text input widget, requires an __[info]__ argument.
 * - __[textarea]__ - Creates a textarea type of widget, requires __[info]__ argument.
 * - __[checkbox]__ - Creates a checkbox input widget, requires __[info]__ argument.
 * - __[select]__ - Creates a select dropdown widget, requires __[info]__ argument.
 * - __[radio-group]__ - Creates a group of radio buttons.
 *
 * The __[info]__ arguments above becomes your widgets' descriptive labels.
 *
 * The __[select]__ and __[radio-group]__ widgets, requires an __[options]__
 * collection, being the options the user can legally select. The __[options]__
 * arguments is a name/value collection, where the name becomes the displayed
 * string, and the value becomes the value for the selected option. All arguments
 * beneath an __[option]__ argument, becomes appended automatically into the
 * specific option/radio-button widget, allowing you to add up for instance a
 * __[checked]__ or __[selected]__ argument to your specified option widget,
 * to make sure it is by default selected or checked for instance.
 *
 * All other arguments to all other widgets are automatically added as arguments
 * into the specific widget, allowing you to add for instance a __[value]__ to
 * a __[text]__ widget, specifying an initial value for it, or a __[checked]__
 * argument to a __[checkbox]__ specifying if it is initially checked, etc.
 *
 * You can serialize the form manually if you wish, but you can also use the
 * __[micro.form.serialize]__ event to retrieve all values of a specific form
 * in your page.
 *
 * Notice, when used in combination with [micro.form.serialize], you can add
 * a __[.data-field]__ to most widgets, to avoid using the widget ID
 * as a data-field name, for cases when you have multiple form widgets with
 * unpredictable names on your form. If you do, you'll probably want to add a
 * __[.data-value]__ for every __[radio-group]__ option element. The
 * __[.data-field]__ will be what is returned for the specific widget during
 * invocation of __[micro.form.serialize]__.
 *
 * You don't need to add a __[.data-value]__ for your select widget's option
 * elements, since these values will be taken from the option element's value,
 * and not its ID - Which anyways can have multiple similar values globally in
 * your form.
 */
create-event:micro.widgets.wizard-form

  /*
   * Used to separate parameters from the rest of the event.
   */
  .signal

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.optional:x:/..
    text
    textarea
    checkbox
    select
    radio-group

  /*
   * Looping through all arguments and handling them accordingly.
   */
  for-each:x:/@.signal/--/<-(!/_arg!/style!/class)

    /*
     * Figuring out what the current argument is.
     */
    switch:x:/@_dp/#?name

      case:class

        /*
         * Class declaration for main widget.
         */
        add:x:/../*/return/*/container
          src:x:/@_dp/#

      case:text

        /*
         * Single line text input.
         */
        eval-x:x:/+2/**
        add:x:/+/**/input
          src:x:/@_dp/#/*(!/info)
        add:x:/../*/return/*/container/*/widgets
          src
            div
              class:strip fill
              widgets
                label
                  innerValue:x:/@_dp/#/*/info?value
                  for:x:/@_dp/#?value
                  class:description-7
                input:x:/@_dp/#?value
                  type:text
                  placeholder:{0} ...
                    :x:/@_dp/#/*/info?value

      case:textarea

        /*
         * Multiple lines text input.
         */
        eval-x:x:/+2/**
        add:x:/+/**/literal
          src:x:/@_dp/#/*(!/info)
        add:x:/../*/return/*/container/*/widgets
          src
            literal:x:/@_dp/#?value
              element:textarea
              class:fill
              placeholder:x:/@_dp/#/*/info?value
              title:x:/@_dp/#/*/info?value
              rows:5

      case:select

        /*
         * Select widget.
         */
        .exe
          return:x:/@_dn/#/*
        eval-x:x:/+3/**
        add:x:/+2/**/select
          src:x:/@_dp/#/*(!/info!/options)
        apply:x:/+/**/select/*/widgets
          src:x:/@_dp/#/*/options/*
          template
            option
              {value}:x:?value
              {innerValue}:x:?name
              {@eval}:x:/@.exe
        add:x:/../*/return/*/container/*/widgets
          src
            div
              class:strip fill
              widgets
                label
                  innerValue:x:/@_dp/#/*/info?value
                  class:description-7
                select:x:/@_dp/#?value
                  widgets

      case:radio-group

        /*
         * Radio group widgets.
         */
        if:x:/@_dp/#?value
          not
          set:x:/@_dp/#?value
            p5.types.guid.new
        for-each:x:/@_dp/#/*/options/*
          if:x:/@_dp/#?value
            not
            set:x:/@_dp/#?value
              p5.types.guid.new
        .exe
          return:x:/@_dn/#/*
        add:x:/@_dp/#/*/options/*
          src:x:/@_dp/#/*/\.data-field
        add:x:/+/**/{input}
          src:"name:{0}"
            :x:/@_dp/#?value
        apply:x:/+/*/src
          src:x:/@_dp/#/*/options/*
          template
            label
              widgets
                span
                  {innerValue}:x:?name
                {input}:x:?value
                  type:radio
                  {value}:x:?value
                  {@eval}:x:/@.exe
        add:x:/../*/return/*/container/*/widgets
          src

      case:checkbox

        /*
         * Checkbox widget.
         */
        if:x:/@_dp/#?value
          not
          set:x:/@_dp/#?value
            p5.types.guid.new
        eval-x:x:/+2/**
        add:x:/+/**/input
          src:x:/@_dp/#/*(!/info)
        add:x:/../*/return/*/container/*/widgets
          src
            label
              class:input-label
              widgets
                span
                  innerValue:x:/@_dp/#/*/info?value
                input:x:/@_dp/#?value
                  type:checkbox

      case:br

        /*
         * Carriage return, slightly special.
         */
        if:x:/@_dp/#/*/style
          not
          // Defaulting some sane style, to make sure we create a hard break.
          add:x:/./+2/*/*
            src
              style:"clear:both;"
        add:x:/+/*/*
          src:x:/@_dp/#/*
        add:x:/../*/return/*/container/*/widgets
          src
            br

      case:collection

        /*
         * A grouping of widgets, creating a wrapper container element, and iterating its
         * [widgets] collection.
         */
        add:x:/+
          src:x:/@_dp/#/*(!/widgets)|/@_dp/#/*/widgets/*
        micro.widgets.wizard-form
        add:x:/../*/return/*/container/*/widgets
          src:x:/@micro.widgets.wizard-form/*
        set:x:/../*/return/*/container/*/widgets/0/-?value
          src:x:/@_dp/#?value

      default

        /*
         * Some arbitrary HTML widget not natively supported, or possible some
         * arbitrary attribute.
         */
        if:x:/@_dp/#?name
          ~:.
          or:x:/@_dp/#?name
            =:visible
          add:x:/../*/return/*/container
            src:x:/@_dp/#
        else
          add:x:/../*/return/*/container/*/widgets
            src:x:/@_dp/#

  /*
   * Returning widget to caller, making sure we add [style] and [class] arguments.
   */
  add:x:/../*/return/*/container
    src:x:/../*(/class|/style)
  return
    container
      widgets
