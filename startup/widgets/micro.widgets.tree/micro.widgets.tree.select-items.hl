/*
 * Creates the __[micro.widgets.tree.select-items]__ Active Event.
 */

/*
 * This event allows you to explicitly select some __[items]__ in your
 * __[micro.widgets.tree]__ widget.
 *
 * Pass in __[\_arg]__ as the ID of the main tree widget you want to select items
 * within. __[items]__ must be a collection of items to select.
 *
 * **Notice**, all previously selected items are de-selected.
 */
create-event:micro.widgets.tree.select-items

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    _arg:string
    items

  /*
   * First finding all previously selected items, and de-selecting them.
   */
  p5.web.widgets.find-like:x:/../*/_arg?value
    class:tree-selected
  if:x:/@p5.web.widgets.find-like/*/*?count
    !=:int:0

    /*
     * Tree has previously selected items, checking if it's the same item that
     * was selected again.
     */
    if:x:/@p5.web.widgets.find-like/*/*?count
      =:int:1
      and:x:/../*/items/*?count
        =:int:1

      /*
       * Retrieving parent element, to get its [_item-id], and checking if it's
       * the same item clicked twice.
       */
      p5.web.widgets.get-parent:x:/@p5.web.widgets.find-like/*/*?value
      get-widget-property:x:/-/*/*?value
        _item-id
      if:x:/@get-widget-property/*/*?value
        =:x:/../*/items/0?name

        /*
         * Currently clicked item was selected from before, making sure we raise
         * our event as a "double click" event, before returning early since there
         * are no reasons to update our CSS classes.
         */
        add:x:/+
          src:x:/../*/items
        micro.widgets.tree._select:x:/../*/_arg?value
          double-clicked:bool:true
        return

    /*
     * Deleting selected CSS classes from previously selected items.
     */
    micro.css.delete:x:/@p5.web.widgets.find-like/*/*?value
      class:tree-selected

  /*
   * Then adding the selected CSS class to all items requested by caller.
   */
  for-each:x:/../*/items/*?name
    p5.web.widgets.find:x:/../*/_arg?value
      _item-id:x:/@_dp?value
    p5.web.widgets.find-first:x:/@p5.web.widgets.find/*/*?value
      element:a
    micro.css.add:x:/@p5.web.widgets.find-first/*/0?value
      class:tree-selected

    /*
     * Then making sure all ancestor elements of currently selected item is expanded,
     * to make sure no selected items are even "invisible", if there are any.
     */
    p5.web.widgets.find-ancestor-like:x:/@p5.web.widgets.find-first/*/*?value
      class:hide
      element:ul
    if:x:/@p5.web.widgets.find-ancestor-like/*/*
      not
      continue
    micro.css.delete:x:/@p5.web.widgets.find-ancestor-like/*/*?value
      class:hide
    p5.web.widgets.get-parent:x:/@p5.web.widgets.find-ancestor-like/*/*?value
    micro.css.add:x:/@p5.web.widgets.get-parent/*/*?value
      class:tree-expanded
    p5.web.widgets.find-first:x:/@p5.web.widgets.get-parent/*/*?value
      element:span
    micro.css.toggle:x:/@p5.web.widgets.find-first/*/*?value
      class:folder-open folder-close

  /*
   * Making sure [.onselect] lambda callback is invoked.
   */
  add:x:/+
    src:x:/../*/items
  micro.widgets.tree._select:x:/../*/_arg?value
