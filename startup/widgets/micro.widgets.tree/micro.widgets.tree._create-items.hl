
/*
 * Supporting Active Event for TreeView that creates tree items.
 *
 * Used both during initial creation of tree widget, to create initially shown nodes, and during 
 * "toggling" (creation of new items).
 */
create-event:micro.widgets.tree._create-items

  /*
   * These are the default CSS classes used for icon items, if no explicit override is supplied by caller.
   */
  .options
    class-close:icon folder-close folder
    class-open:icon folder-open folder

  /*
   * Checking if we have items, and if not, returning early.
   */
  if:x:/../*/items/#/*
    not
    return

  /*
   * Looping through all [items]
   */
  for-each:x:/../*/items/#/*

    /*
     * Forward evaluating [items] collection in recursive invocation of "self" inside of [add], to make sure
     * we recursively add children [items] of currently iterated [items].
     *
     * This allows us to create hierarchies of items, both during initial creation, and during toggling/expanding of items.
     */
    eval-x:x:/+/*/*
    add:x:/..for-each/*/add/[1,2]/*/*/*/widgets
      micro.widgets.tree._create-items
        items:x:/..for-each/*/_dp/#/*/items

    /*
     * Checking if this item has children, at which case, we should add the "tree-expanded" CSS class to "li" HTML widget,
     * and the "icon open" CSS class to the nested icon "span" HTML element.
     */
    if:x:/..for-each/*/add/[1,2]/*/*/*/widgets/*/ul

      /*
       * Adding the CSS class of "tree-expanded" to our "li" HTML element.
       */
      set:x:/..for-each/*/add/[1,2]/*/*/*/class?value
        src:{0} tree-expanded
          :x:/..for-each/*/add/[1,2]/*/*/*/class?value

      /*
       * Applying the [class-open] CSS class to the "icon" span HTML element.
       */
      set:x:/..for-each/*/add/[1,2]/*/*/*/widgets/*/a/*/widgets/*/span/[0,1]/*/class?value
        src:x:(/..for-each/*/_dp/#/*/class-open|/../*/.options/*/class-open)/$?value

    else

      /*
       * Applying the [class-close] CSS class to the "icon" span HTML element.
       */
      set:x:/..for-each/*/add/[1,2]/*/*/*/widgets/*/a/*/widgets/*/span/[0,1]/*/class?value
        src:x:(/..for-each/*/_dp/#/*/class-close|/../*/.options/*/class-close)/$?value

    /*
     * Storing the "close icon CSS class" and "open icon CSS class" in widget as invisible property, 
     * such that we can retrieve it later when item  is toggled.
     */
    set:x:/..for-each/*/add/[1,2]/*/*/*/widgets/*/a/*/widgets/*/span/[0,1]/*/_class-close?value
      src:x:(/..for-each/*/_dp/#/*/class-close|/../*/.options/*/class-close)/$?value
    set:x:/..for-each/*/add/[1,2]/*/*/*/widgets/*/a/*/widgets/*/span/[0,1]/*/_class-open?value
      src:x:(/..for-each/*/_dp/#/*/class-open|/../*/.options/*/class-open)/$?value

    /*
     * Setting properties for currently iterated item, and adding item into [return] below.
     *
     * These are simply [innerValue] on hyperlink, in addition to [_item-id] on "li", which is a server-side hidden property
     * for the item, allowing us to figure out the "id" of which item was clicked, among other things.
     */
    eval-x:x:/..for-each/*/add/[1,2]/*/*/*(/_item-id|/*/a/*/widgets/*/span/[1,2]/*/innerValue)

    /*
     * Adding any custom CSS classes caller supplied to currently iterated widget.
     */
    if:x:/..for-each/*/_dp/#/*/class?value
      set:x:/..for-each/*/add/[1,2]/*/*/*/class?value
        src:item {0}
          :x:/..for-each/*/_dp/#/*/class?value

    /*
     * Adding currently iterated [items] to [return] below, now with the correct [innerValue] and [_item-id] according
     * to caller's request.
     */
    add:x:/../*/return/*/*
      src
        li
          class:item
          _item-id:x:/..for-each/*/_dp/#?value
          widgets
            a
              href:#
              role:button
              class:item-label
              onclick

                /*
                 * Getting id of item, and passing into [select-items] as [items] collection.
                 */
                p5.web.widgets.get-parent:x:/../*/_event?value
                p5.web.widgets.property.get:x:/-/*/*?value
                  _item-id

                /*
                 * Then finding "root tree" widget for currently clicked item, such that we can pass it
                 * into [select-items] and (possibly) [toggle-items].
                 */
                p5.web.widgets.find-ancestor:x:/../*/_event?value
                  _root-tree

                /*
                 * Checking if item is not expanded yet, and if so, making sure we do expand it,
                 * unless it's a "leaf" item.
                 */
                get-widget-property:x:/@p5.web.widgets.get-parent/*/*?value
                  class
                if:x:/@get-widget-property/*/*?value
                  ~:tree-leaf
                  not

                  /*
                   * Item is not a "leaf node".
                   */
                  p5.web.widgets.find-first:x:/@p5.web.widgets.get-parent/*/*?value
                    element:ul
                  if:x:/@p5.web.widgets.find-first/*/*?value
                    not

                    /*
                     * Item has not been initially expanded yet, hence expanding it.
                     *
                     * Making sure we pass in [_item-id] for "li" element into our [select-items] invocation.
                     */
                    add:x:/..if/*/micro.widgets.tree.toggle-items/*
                      src:@"""{0}"""
                        :x:/../*/p5.web.widgets.property.get/*/*?value
                    micro.widgets.tree.toggle-items:x:/../*/p5.web.widgets.find-ancestor/*/*?value
                      items

                /*
                 * Making sure we pass in [_item-id] for "li" element into our [select-items] invocation.
                 */
                add:x:/../*/micro.widgets.tree.select-items/*
                  src:@"""{0}"""
                    :x:/../*/p5.web.widgets.property.get/*/*?value
                micro.widgets.tree.select-items:x:/../*/p5.web.widgets.find-ancestor/*/*?value
                  items

              /*
               * To make sure we are able to create our SEO URL in hyperlink, we handle [oninit],
               * since at that point, the widget is "rooted", and we can traverse all "li" elements
               * upwards in hierarchy, all the way to the "root" widget, to retrieve all IDs of elements.
               */
              oninit

                /*
                 * Retrieving parent "li" HTML widget, and passing it into [_create-url], which will
                 * traverse the hierarchy upwards, adding all necessary IDs, and creating a URL that will
                 * expand all items leading to "current item".
                 */
                p5.web.widgets.find-ancestor:x:/../*/_event?value
                  _root-tree
                p5.web.widgets.property.get:x:/-/*/*?value
                  _root-tree

                /*
                 * Notice, if the [_root-tree] hidden property on root widget contains something, it means we should
                 * create an SEO friendly tree, and use the value of [_root-tree] as the HTTP GET parameter name while doing.
                 */
                if:x:/-/*/*?value
                  p5.web.widgets.get-parent:x:/../*/_event?value
                  micro.widgets.tree._create-url:x:/-/*/*?value
                  p5.web.widgets.property.set:x:/../*/_event?value
                    href:x:/..if/*/micro.widgets.tree._create-url?value

              widgets
                span
                  _class-close
                  _class-open
                  class
                  innerValue:
                  role:button
                  onclick

                    /*
                     * Getting id of item, and passing into [toggle-items] as [items] collection.
                     *
                     * First finding ancestor "li" element, and retrieving its [_item-id].
                     */
                    p5.web.widgets.get-parent:x:/../*/_event?value
                    p5.web.widgets.get-parent:x:/-/*/*?value
                    p5.web.widgets.property.get:x:/-/*/*?value
                      _item-id

                    /*
                     * Adding [_item-id]'s value into [micro.widgets.tree.toggle-items] invocation.
                     */
                    add:x:/../*/micro.widgets.tree.toggle-items/*
                      src:@"""{0}"""
                        :x:/../*/p5.web.widgets.property.get/*/*?value

                    /*
                     * Then finding "root tree" widget for currently clicked item, such that we can pass it
                     * into [toggle-items].
                     */
                    p5.web.widgets.find-ancestor:x:/../*/_event?value
                      _root-tree
                    micro.widgets.tree.toggle-items:x:/../*/p5.web.widgets.find-ancestor/*/*?value
                      items

                span
                  innerValue:x:/..for-each/*/_dp/#?name

  /*
   * Returning widget hierarchy.
   */
  return
    ul
      class:children
      widgets
