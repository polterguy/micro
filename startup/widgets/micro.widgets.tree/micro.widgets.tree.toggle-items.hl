
/*
 * Invoked when user wants to "toggle" one or more items.
 * Expects [items] collection.
 *
 * Notice, you can force this event to only expand items, by adding the [force-expand] argument, and set its
 * value to being true. If you do, it will not hide already expanded items.
 * This feature is used among other things during "unrolling" of items due to SEO friendly URLs being traversed.
 */
create-event:micro.widgets.tree.toggle-items

  /*
   * Looping through all [items] caller wants to toggle.
   */
  for-each:x:/../*/items/*?name

    /*
     * Finding anchor/hyperlink for currently iterated item, then retrieving its parent, 
     * for then to find its parent's "ul" widget, if it exist.
     */
    p5.web.widgets.find:x:/../*/_arg?value
      _item-id:x:/@_dp?value
    if:x:/@p5.web.widgets.find/*/*?value
      not

      /*
       * Caller supplied a non-existing item.
       */
      throw:Oops, that item doesn't exist!

    /*
     * Now checking if there already exist a "ul" HTML widget beneath the main "item".
     * If a "ul" widget exist, and it is not hidden, we hide it, unless [force-expand] is true.
     * If the "ul" widget exist, and is hidden, we show it.
     * If it doesn't exist, we invoke the lambda callback provided during creation, to retrieve 
     * additional items, before we create the "ul" widget and show it.
     *
     * This prevents having to retrieve the items from the supplied lambda callback more than once
     * for each item.
     *
     * Notice, hiding can be prevented by adding the [force-expand] argument set to true.
     * If you do, it will only expand, regardless of if the item is expanded from before or not.
     * This feature is being used, among other things, while "unrolling" items (SEO friendly links).
     */
    p5.web.widgets.get-children:x:/@p5.web.widgets.find/*/*?value
    if:x:/@p5.web.widgets.get-children/*/*/container/[1,2]

      /*
       * Children items already exist, hence we check if it is hidden,
       * and if so, we simply make it visible, otherwise we hide it (unless [force-expand] is true).
       */
      p5.web.widgets.property.get:x:/@p5.web.widgets.get-children/*/*/container/[1,2]?value
        class

      /*
       * Checking if "ul" HTML widget is simply hidden.
       */
      if:x:/@p5.web.widgets.property.get/*/*?value
        ~:hide

        /*
         * "ul" HTML widget was simply hidden, making sure we show it, by deleting the "hide" class, and
         * add the "tree-expanded" CSS class to main "li" HTML widget, before finally updating the "icon CSS class"
         * to the [_class-open] value.
         */
        micro.css.delete:x:/@p5.web.widgets.get-children/*/*/container/[1,2]?value
          class:hide
        micro.css.add:x:/@p5.web.widgets.find/*/*?value
          class:tree-expanded

        /*
         * Making sure we set the "icon span" CSS class to [_class-open].
         */
        p5.web.widgets.get-children:x:/@p5.web.widgets.get-children/*/*/container/[0,1]?value
        p5.web.widgets.property.get:x:/@p5.web.widgets.get-children/*/0?value
          _class-open
        p5.web.widgets.property.set:x:/@p5.web.widgets.get-children/*/0?value
          class:x:/@p5.web.widgets.property.get/*/*?value
      else

        /*
         * Checking if caller wanted to "force an expansion" (meaning, open items will not be closed).
         * Only if caller did NOT supply [force-expand] as true, we actually hide items.
         */
        if:x:/../*/force-expand?value
          not

          /*
           * "ul" HTML widget is visible, and caller did not supply [force-expand] as true,
           * hence we hide it, by applying the "hide" class to the main "ul" HTML widget.
           */
          micro.css.add:x:/@p5.web.widgets.get-children/*/*/container/[1,2]?value
            class:hide

          /*
           * Then we delete the "tree-expanded" CSS class to our main "li" HTML widget.
           */
          micro.css.delete:x:/@p5.web.widgets.find/*/*?value
            class:tree-expanded

          /*
           * Finally we apply our "close icon CSS class" to the icon "span" HTML widget.
           */
          p5.web.widgets.get-children:x:/@p5.web.widgets.get-children/*/*/container/[0,1]?value
          p5.web.widgets.property.get:x:/-/*/0?value
            _class-close
          p5.web.widgets.property.set:x:/@p5.web.widgets.get-children/*/0?value
            class:x:/@p5.web.widgets.property.get/*/*?value

    else

      /*
       * Children items are NOT visible, requesting them through lambda callback supplied during creation, 
       * and creating widgets from these items.
       */
      eval-x:x:/+/*
      micro.widgets.tree._get-items:x:/../*/_arg?value
        _item-id:x:/@_dp?value

      /*
       * Making sure this item actually has children items, and if not, going to next iteration of [for-each].
       */
      if:x:/@micro.widgets.tree._get-items/*/items/*
        not
        continue

      /*
       * Then evaluating Active Event responsible for creating widgets out of our returned [items] collection,
       * from the above [micro.widgets.tree._get-items] invocation.
       *
       * Notice, we pass in the node to our [items] by reference, as value of the [items] node argument.
       */
      eval-x:x:/+/*
      micro.widgets.tree._create-items
        items:x:/@micro.widgets.tree._get-items/*/items

      /*
       * Making sure we change the returned [ul] to a [p5.web.widgets.create-container] invocation.
       */
      set:x:/@micro.widgets.tree._create-items/0?name
        src:p5.web.widgets.create-container

      /*
       * Making sure we add "ul" as value of [element] to [p5.web.widgets.create-container] invocation, in addition
       * to making sure our "ul" widget gets the correct [parent] argument, which is the parent "li" element.
       */
      eval-x:x:/+/*/*
      add:x:/@micro.widgets.tree._create-items/0
        src
          element:ul
          parent:x:/..for-each/*/p5.web.widgets.find/*/*?value

      /*
       * Now we can simply [eval] the returned lambda from the above [micro.widgets.tree._create-items] invocation,
       * since it is now a [p5.web.widgets.create-container] invocation, correctly creating items, appending to tree item,
       * specified in currently iterated [items] argument.
       */
      eval:x:/@micro.widgets.tree._create-items

      /*
       * Adding the "expanded" CSS class in parent widget.
       */
      micro.css.add:x:/..for-each/*/p5.web.widgets.find/*/*?value
        class:tree-expanded

      /*
       * Making sure we apply the "open" CSS class to the icon item.
       */
      p5.web.widgets.get-children:x:/..for-each/*/p5.web.widgets.get-children/*/*/container/[0,1]?value
      p5.web.widgets.property.get:x:/@p5.web.widgets.get-children/*/0?value
        _class-open
      p5.web.widgets.property.set:x:/@p5.web.widgets.get-children/*/0?value
        class:x:/@p5.web.widgets.property.get/*/*?value
