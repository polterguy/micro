
/*
 * Creates the grid extension widget.
 *
 * Pass in a collection of [columns] as your columns, and optionally a collection of [rows] as your initial rows.
 * Use [micro.widgets.grid.databind] to databind the grid towards a (different) row collection later.
 *
 * Both the [columns] and the arguments to [micro.widgets.grid.databind] must be in a similar format, which is a collection
 * of [item] nodes, each having multiple nodes for each cell in your grid, where the value becomes the displayed text.
 * Alternatively, you can supply [widgets] collection to one or more of your cell within an [item], which will render
 * your cell as a container widget, with the supplied [widgets] collection as its content.
 * All other arguments to your cells, becomes properties/attributes to your cells ('td' elements).
 *
 * Your [columns] collection obeys by similar rules, and are by default a simple collection of name strings,
 * which will become the inner value of your cells. If you 
 */
create-event:micro.widgets.grid

  /*
   * Used to separate parameters from the rest of the event.
   */
  .signal

  /*
   * Adding columns.
   */
  for-each:x:/@.signal/--/columns/*

    /*
     * Adding the common stuff.
     */
    add:x:/../*/return/*/container/*/widgets/*/thead/*/widgets/*/tr/*/widgets
      src
        th

    /*
     * Checking type of column.
     */
    if:x:/@_dp/#/*/widgets

      /*
       * Widget template column.
       */
      add:x:/+/*
        src:x:/@_dp/#/*/widgets
      add:x:/../*/return/*/container/*/widgets/*/thead/*/widgets/*/tr/*/widgets/0/-
        src

    else

      /*
       * Simple 'name' column.
       */
      eval-x:x:/+/*/*
      add:x:/../*/return/*/container/*/widgets/*/thead/*/widgets/*/tr/*/widgets/0/-
        src
          innerValue:x:/@_dp/#?name

    /*
     * Adding the rest of the [columns] arguments.
     */
    add:x:/../*/return/*/container/*/widgets/*/thead/*/widgets/*/tr/*/widgets/0/-
      src:x:/@_dp/#/*(!/widgets)

  /*
   * Checking is caller supplied an initial set of [rows].
   */
  if:x:/@.signal/--/rows/*
    add:x:/+
      src:x:/@.signal/--/rows/*
    micro.widgets.grid._create-rows
    add:x:/../*/return/*/container/*/widgets/*/tbody/*/widgets
      src:x:/@micro.widgets.grid._create-rows/*

  /*
   * Passing in other arguments to grid.
   */
  add:x:/../*/return/*/container
    src:x:/@.signal/--/<-(!/columns!/rows)

  /*
   * Returning widget to caller.
   */
  return
    container
      element:table
      widgets
        thead
          widgets
            tr
              widgets
        tbody
          widgets





/*
 * Databinds the [_arg] grid.
 * Expects an [item] collection, similarly to the content of the [rows] argument when grid is created.
 */
create-event:micro.widgets.grid.databind

  /*
   * Signal node, to separate arguments from the rest of the lambda object of the event.
   */
  .signal

  /*
   * Finding the "tbody" element of the grid, and clearing it of its previous items.
   */
  p5.web.widgets.find-first:x:/../*/_arg?value
    element:tbody
  clear-widget:x:/@p5.web.widgets.find-first/*/*?value

  /*
   * Transforming the given collection of items to a widget hierarchy.
   */
  add:x:/+
    src:x:/@.signal/--/<-(!/_arg)
  micro.widgets.grid._create-rows

  /*
   * Appending results of above invocation into below [create-widgets] invocation, making sure we
   * get the parent correctly, before we invoke it.
   */
  add:x:/../*/create-widgets
    src:x:/@micro.widgets.grid._create-rows/*
  eval-x:x:/+/*/*
  add:x:/../*/create-widgets/*
    src
      parent:x:/@p5.web.widgets.find-first/*/*?value
  create-widgets





/*
 * Returns a bunch of "tr" widgets from the given collection of rows.
 */
create-event:micro.widgets.grid._create-rows

  /*
   * Signal node, to separate arguments from the rest of the lambda object of the event.
   * Also used to hold return values.
   */
  .signal

  /*
   * Finding "tbody" element, clearing it, and looping through each row given as argument.
   */
  for-each:x:/@.signal/--/<-

    /*
     * Adding the generic stuff
     */
    add:x:/+/*/*
      src:x:/@_dp/#/*/\.row/*
    add:x:/@.signal
      src
        tr
          widgets

    /*
     * Looping through each cell in currently iterated row.
     */
    for-each:x:/@_dp/#/*(!/.row)

      /*
       * Adding the generic stuff.
       */
      add:x:/@.signal/0/-/*/widgets
        src
          td
      add:x:/@.signal/0/-/*/widgets/0/-
        src:x:/@_dp/#/*(!/widgets)

      /*
       * Checking what type of cell this is, which can be static text, and template cell.
       */
      if:x:/@_dp/#/*/widgets

        add:x:/@.signal/0/-/*/widgets/0/-
          src:x:/@_dp/#/*/widgets

      else

        eval-x:x:/+/*/*/innerValue
        add:x:/@.signal/0/-/*/widgets/0/-
          src
            innerValue:x:/@_dp/#?value

  /*
   * Returning content of [.signal]
   */
  add:x:/+
    src:x:/@.signal/*
  return
