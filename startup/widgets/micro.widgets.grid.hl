/*
 * Creates the __[micro.widgets.grid]__ extension widget, and its associated
 * helper Active Events.
 */

/*
 * The widget is the equivalent of a _"datagrid"_ in Micro, and allows you to
 * create table type of widgets.
 *
 * Optionally pass in a collection of __[columns]__ as your columns, and a
 * collection of __[rows]__ as your initial data rows. Use __[micro.widgets.grid.databind]__
 * to databind the grid towards a (different) row collection later.
 *
 * Both the __[columns]__ and the __[rows]__ arguments to your
 * __[micro.widgets.grid.databind]__ invocation must be in a similar format as
 * the arguments supplied during creation. Your __[rows]__ argument is expected
 * to be a collection of __[item]__ nodes, each having multiple nodes for each
 * cell in your grid, where the value becomes the displayed text.
 *
 * Optionally, you can supply __[widgets]__ collection to one or more of items,
 * in both your columns and your rows. All other arguments to your cells, becomes
 * properties/attributes to your cells (_'td'_ elements).
 */
create-event:micro.widgets.grid

  /*
   * Used to separate parameters from the rest of the event.
   */
  .signal

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.optional:x:/..
    columns
    rows
      item

  /*
   * Adding columns, if there are any.
   */
  if:x:/@.signal/--/columns

    /*
     * Caller specified a [columns] collection.
     * First adding actual "thead" widget, then looping through each column definition.
     */
    insert-before:x:/../*/return/*/container/*/widgets/*/tbody
      src
        thead
          widgets
            tr
              widgets
    for-each:x:/@.signal/--/columns/*(!/\.head!/\.row)

      /*
       * Adding the common stuff.
       */
      add:x:/../*/return/*/container/*/widgets/*/thead/*/widgets/*/tr/*/widgets
        src
          th

      /*
       * Checking type of column.
       */
      if:x:/@_dp/#/*/widgets

        /*
         * Widget template column.
         */
        add:x:/+/*
          src:x:/@_dp/#/*/widgets
        add:x:/../*/return/*/container/*/widgets/*/thead/*/widgets/*/tr/*/widgets/0/-
          src

      else

        /*
         * Simple 'name' column.
         */
        eval-x:x:/+/*/*
        add:x:/../*/return/*/container/*/widgets/*/thead/*/widgets/*/tr/*/widgets/0/-
          src
            innerValue:x:/@_dp/#?name

      /*
       * Adding the rest of the [columns] arguments.
       */
      add:x:/../*/return/*/container/*/widgets/*/thead/*/widgets/*/tr/*/widgets/0/-
        src:x:/@_dp/#/*(!/widgets)

    /*
     * Adding [.head] collection, if there are any.
     */
    add:x:/../*/return/*/container/*/widgets/*/thead
      src:x:/@.signal/--/columns/*/\.head/*

    /*
     * Adding columns [.row] collection, if there are any.
     */
    add:x:/../*/return/*/container/*/widgets/*/thead/*/widgets/*/tr
      src:x:/@.signal/--/columns/*/\.row/*

  /*
   * Adding [.body] collection, if there are any.
   */
  add:x:/../*/return/*/container/*/widgets/*/tbody
    src:x:/@.signal/--/\.body/*

  /*
   * Checking is caller supplied an initial set of [rows].
   */
  if:x:/@.signal/--/rows/*
    add:x:/+
      src:x:/@.signal/--/rows/*
    micro.widgets.grid._create-rows
    add:x:/../*/return/*/container/*/widgets/*/tbody/*/widgets
      src:x:/@micro.widgets.grid._create-rows/*

  /*
   * Passing in other arguments to 'table'.
   */
  add:x:/../*/return/*/container
    src:x:/@.signal/--/<-(!/columns!/rows!/\.body!/\.head)

  /*
   * Returning widget to caller.
   */
  return
    container
      element:table
      widgets
        tbody
          widgets





/*
 * Databinds the specified __[\_arg]__ grid.
 *
 * Expects an __[item]__ collection, similarly to the content of the __[rows]__
 * argument when the grid was created. Optionally pass in __[keep-items]__ and
 * set its value to boolean _"true"_ if you don't want to clear its existing
 * items, but rather add additional items to the grid.
 *
 * The latter allows you to among other things implement a _"never ending scrolling"_
 * type of grid.
 */
create-event:micro.widgets.grid.databind

  /*
   * Signal node, to separate arguments from the rest of the lambda object of the event.
   */
  .signal

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    _arg:string
    item

  /*
   * Finding the "tbody" element of the grid, and clearing it of its previous items,
   * unless [keep-items] is set to boolean "true".
   */
  p5.web.widgets.find-first:x:/../*/_arg?value
    element:tbody
  if:x:/@.signal/--/keep-items?value
    not

    /*
     * Clearing old rows from grid.
     */
    clear-widget:x:/@p5.web.widgets.find-first/*/*?value

  /*
   * Transforming the given collection of items to a widget hierarchy.
   */
  add:x:/+
    src:x:/@.signal/--/<-(!/_arg!/keep-items)
  micro.widgets.grid._create-rows

  /*
   * Appending results of above invocation into below [create-widgets] invocation, making sure we
   * get the parent correctly, before we invoke it.
   */
  add:x:/../*/create-widgets
    src:x:/@micro.widgets.grid._create-rows/*

  /*
   * Adding [parent] to all rows that doesn't already hav an [after] argument.
   */
  eval-x:x:/+/*/*
  add:x:/../*/create-widgets/*(!/*/after/.)
    src
      parent:x:/@p5.web.widgets.find-first/*/*?value
  create-widgets





/*
 * Returns a bunch of "tr" widgets from the given collection of rows.
 */
create-event:micro.widgets.grid._create-rows

  /*
   * Signal node, to separate arguments from the rest of the lambda object of the event.
   * Also used to hold return values.
   */
  .signal

  /*
   * Finding "tbody" element, clearing it, and looping through each row given as argument.
   */
  for-each:x:/@.signal/--/<-

    /*
     * Adding the generic stuff
     */
    add:x:/+2/*/*
      src:x:/@_dp/#/*/.row/*(!/.replace)
    if:x:/@_dp/#/*/.row/*/.replace?value

      /*
       * Row is meant to replace an existing row, and not be appended into grid per se.
       */
      eval-x:x:/+/*/**(/after|/_after)
      add:x:/..for-each/*/add/[1,2]/*/*
        src
          after:x:/@_dp/#/*/.row/*/.replace?value
          oninit
            _after:x:/@_dp/#/*/.row/*/.replace?value
            delete-widget:x:/-?value

    /*
     * Now we can actually add row.
     */
    add:x:/@.signal
      src
        tr
          widgets

    /*
     * Looping through each cell in currently iterated row.
     */
    for-each:x:/@_dp/#/*(!/.row)

      /*
       * Adding the generic stuff.
       */
      add:x:/@.signal/0/-/*/widgets
        src
          td
      add:x:/@.signal/0/-/*/widgets/0/-
        src:x:/@_dp/#/*(!/widgets)

      /*
       * Checking what type of cell this is, which can be static text, and template cell.
       */
      if:x:/@_dp/#/*/widgets

        add:x:/@.signal/0/-/*/widgets/0/-
          src:x:/@_dp/#/*/widgets

      else

        eval-x:x:/+/*/*/innerValue
        add:x:/@.signal/0/-/*/widgets/0/-
          src
            innerValue:x:/@_dp/#?value

  /*
   * Returning content of [.signal]
   */
  add:x:/+
    src:x:/@.signal/*
  return
