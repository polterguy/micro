/*
 * Creates the CodeMirror extension widget.
 *
 * Arguments;
 *
 * - [mode] - Language mode for editor, e.g. "htmlmixed" or "hyperlambda", etc. Defaults to "hyperlambda".
 * - [value] - Initial value of editor.
 * - [theme] - Optional theme override. If not given, will use the user's settings. Defaults to _"phosphorus"_.
 * - [keys] - CodeMirror keyboard-shortcuts to JavaScript callbacks. E.g. "Ctrl-T:function(){alert('x');}"
 * - [auto-focus] - If true, the editor will get initial focus.
 * - [height] - Height in pixels, percent, or any other unit for editor.
 * - [.data-field] - Data field name, used when for instance serialising editor's content. Defaults to "codemirror".
 * - [font-size] - Optional font size for content. If not given, will use user's settings, defaulting to 9,25pt if no settings exists.
 * - [tab-size] - Optional tab size. Defaults to 2.
 * - [read-only] - If true, widget is read only. Defaults to false.
 * - [class] - CSS class to use for wrapper widget. Defaults to "micro-codemirror-wrapper".
 * - [style] - CSS styles to use for widget. Notice, will add font-size style automatically, to accommodate for CodeMirror settings.
 * - [oninit] - Lambda callback to be evaluated during initialization of widget.
 *
 * All other arguments are appended into the root container for the widget, allowing you to create for instance hidden attributes,
 * etc on the main container widget wrapping CodeMirror instance.
 */
create-event:micro.widgets.codemirror

  /*
   * Used to separate arguments from the rest of our lambda.
   */
  .signal

  /*
   * Sanity check.
   */
  micro.lambda.contract.optional:x:/..
    mode:string
    value:string
    theme:string
    keys
    auto-focus:bool
    height:string
    .data-field:string
    font-size:string
    tab-size:int
    read-only:bool
    class:string
    style:string
    oninit

  /*
   * Figuring out settings to use for widget, making sure we use "sane defaults".
   */
  .defaults
    mode:hyperlambda
    theme:phosphorus
    auto-focus:bool:false
    height:250px
    .data-field:codemirror
    font-size:9.25
    tab-size:int:2
    read-only:bool:false
    line-numbers:bool:true
    class:micro-codemirror-wrapper
  p5.auth.my-settings.get

  /*
   * Decorating widget with arguments.
   */
  add:x:/../*/return/*/container
    src:x:/@.signal/--(!/_arg!/value!/.data-field!/auto-focus!/height!/mode!/keys!/read-only!/class!/oninit)
  add:x:/../*/return/*/container/*/widgets/*/literal
    src:x:(/@.signal/--(/value|/.data-field)|/@.defaults/*/.data-field)/$
  add:x:/../*/return/*/container/*/widgets/*/literal/*/oninit/*/.oninit
    src:x:/@.signal/--/oninit/*
  add:x:/../*/return/*/container
    src:x:(/@.signal/--/class|/@.defaults/*/class)/$

  /*
   * Passing in [keys] to [oninit], which are additional keyboard shortcuts.
   */
  add:x:/../*/return/*/container/*/widgets/*/literal/*/oninit/*/.keys
    src:x:/../*/keys/*

  /*
   * Returning widget to caller.
   */
  eval-x:x:/+/*/*/style|/+/*/*/widgets/*/literal/*/oninit/*(/.theme|/.line-numbers|/.auto-focus|/.height|/.mode|/.tab-size|/.read-only)
  return
    container
      style:"font-size:{0}pt;{1}"
        :x:(/@.signal/--/*/font-size|/@p5.auth.my-settings.get/*/codemirror/*/font-size|/../*/.defaults/*/font-size)/$?value
        :x:/../*/style?value
      events


        /*
         * Returns CodeMirror editor's value.
         */
        micro.widgets.codemirror.get-value

          /*
           * Verifying invocation is for current instance.
           */
          if:x:/../*/_arg/={0}
            :x:/../*/_event?value

            /*
             * Finding textarea widget and returning its value.
             */
            p5.web.widgets.find:x:/../*/_event?value
              element:textarea
            get-widget-property:x:/@p5.web.widgets.find/*/*?value
              innerValue
            set:x:/+2/*?name
              src:x:/../*/_event?value
            eval-x:x:/+/*
            return
              foo:x:/@get-widget-property/*/*?value


        /*
         * Sets CodeMirror editor's value.
         */
        micro.widgets.codemirror.set-value

          /*
           * Verifying invocation is for current instance.
           */
          if:x:/../*/_arg/={0}?value
            :x:/../*/_event?value

            /*
             * Sanity checking invocation.
             */
            micro.lambda.contract.optional:x:/..
              _arg:string
              content

            /*
             * Finding textarea widget and setting its value.
             */
            p5.web.widgets.find:x:/../*/_event?value
              element:textarea
            set-widget-property:x:/@p5.web.widgets.find/*/*?value
              innerValue:x:/../*/content?value

            /*
             * Sending JavaScript to client that re-fetches the value from textarea widget.
             */
            p5.web.send-javascript:@"p5['{0}'].getDoc().setValue(p5.$('{0}').el.value);"
              :x:/@p5.web.widgets.find/*/*?value


      widgets

        /*
         * Hidden input field, declaring whether or not the editor's content is dirty or not.
         */
        input
          type:hidden
          data-field:dirty-flag
          value:clean

        /*
         * CodeMirror editor's textarea element.
         */
        literal
          element:textarea
          style:"display:none !important;"
          oninit

            /*
             * Forward evaluated above.
             */
            .height:x:(/@.signal/--/height|/@.defaults/*/height)/$?value
            .mode:x:(/@.signal/--/mode|/@.defaults/*/mode)/$?value
            .tab-size:x:(/@.signal/--/tab-size|/@.defaults/*/tab-size)/$?value
            .read-only:x:(/@.signal/--/read-only|/@.defaults/*/read-only)/$?value
            .theme:x:(/@.signal/--/*/theme|/@p5.auth.my-settings.get/*/codemirror/*/theme|/../*/.defaults/*/theme)/$?value
            .line-numbers:x:(/@p5.auth.my-settings.get/*/codemirror/*/line-numbers|/../*/.defaults/*/line-numbers)/$?value
            .auto-focus:x:(/../*/auto-focus|/../*/.defaults/*/auto-focus)/$?value
            .keys

            /*
             * Making sure all boolean arguments are rendered as JavaScript boolean values.
             */
            set:x:/@.read-only?value
              to-lower:x:/@.read-only?value
            set:x:/@.line-numbers?value
              to-lower:x:/@.line-numbers?value
            set:x:/@.auto-focus?value
              to-lower:x:/@.auto-focus?value

            /*
             * Building our additional keyboard shortcut mapping.
             */
            _keys
            for-each:x:/@.keys/*
              set:x:/@_keys?value
                src:@"{0}'{1}':function(){{{2}}},"
                  :x:/@_keys?value
                  :x:/@_dp/#?name
                  :x:/@_dp/#?value

            /*
             * Including CodeMirror editor's JavaScript file(s).
             */
            micro.widgets.codemirror._include-javascript
            micro.widgets.codemirror._include-auto-complete

            /*
             * Checking mode of editor.
             */
            switch:x:/@.mode?value
              case:hyperlambda

                /*
                 * Always included anyway, hence we simply ignore it.
                 */
                .foo

              case:htmlmixed

                /*
                 * Including additional dependencies for HTML mode.
                 */
                .files
                  @MICRO/media/codemirror/addon/hint/javascript-hint.js
                  @MICRO/media/codemirror/addon/hint/xml-hint.js
                  @MICRO/media/codemirror/addon/hint/html-hint.js
                  @MICRO/media/codemirror/addon/hint/css-hint.js
                  @MICRO/media/codemirror/mode/xml/xml.js
                  @MICRO/media/codemirror/mode/javascript/javascript.js
                  @MICRO/media/codemirror/mode/css/css.js
                  @MICRO/media/codemirror/mode/htmlmixed/htmlmixed.js
                micro.page.minify-and-bundle-javascript-file:x:/@.files/*?name

              case:javascript

                /*
                 * Including additional dependencies for JavaScript mode.
                 */
                .files
                  @MICRO/media/codemirror/addon/hint/javascript-hint.js
                  @MICRO/media/codemirror/mode/javascript/javascript.js
                micro.page.minify-and-bundle-javascript-file:x:/@.files/*?name

              case:css

                /*
                 * Including additional dependencies for CSS mode.
                 */
                .files
                  @MICRO/media/codemirror/addon/hint/css-hint.js
                  @MICRO/media/codemirror/mode/css/css.js
                micro.page.minify-and-bundle-javascript-file:x:/@.files/*?name

              case:xml

                /*
                 * Including additional dependencies for XML mode.
                 */
                .files
                  @MICRO/media/codemirror/addon/hint/xml-hint.js
                  @MICRO/media/codemirror/mode/xml/xml.js
                micro.page.minify-and-bundle-javascript-file:x:/@.files/*?name

              default

                /*
                 * Including generic mode file.
                 */
                if
                  fetch:x:/0/0?value
                    file-exists:@MICRO/media/codemirror/mode/{0}/{0}.js
                      :x:/@.mode?value
                  not

                  /*
                   * Oops, mode doesn't exist.
                   */
                  throw:Oops, unsupported CodeMirror mode

                /*
                 * Including JavaScript file for requested mode.
                 */
                p5.web.include-javascript-file:@MICRO/media/codemirror/mode/{0}/{0}.js
                  :x:/@.mode?value

                /*
                 * Using "anyword-hint" autocompletion.
                 */
                p5.web.include-javascript-file:@MICRO/media/codemirror/addon/hint/anyword-hint.js

            /*
             * Making sure necessary Stylesheet files are included.
             */
            micro.widgets.codemirror._include-css

            /*
             * Including theme for editor.
             */
            p5.web.include-css-file:@MICRO/media/codemirror/theme/{0}.css
              :x:/@.theme?value

            /*
             * CodeMirror depends upon having its "root path".
             * Hence, we figure out the root path of Hypereval, and make sure
             * we pass in media path while creating our CodeMirror instance.
             */
            p5.io.unroll-path:@HYPEREVAL/

            /*
             * Transforming input textarea to CodeMirror instance.
             */
            p5.web.send-javascript:@"p5['{0}'] = CodeMirror.fromTextArea(p5.$('{0}').el, {{
  mode:'{6}',
  theme:'{2}',
  lineNumbers:{3},
  styleActiveLine:true,
  path:'{1}/media/codemirror/',
  autofocus:{4},
  tabSize:{8},
  indentUnit:{8},
  indentAuto:true,
  autoCloseBrackets:true,
  showTrailingSpace:true,
  readOnly:{9},
  extraKeys: {{
    'Ctrl-Space':'autocomplete',
    'Shift-Tab':'indentLess',
    'Tab':'indentMore',
    'Alt-F': 'findPersistent',
    {7}
    'Alt-M':function(cm) {{cm.setOption('fullScreen', !cm.getOption('fullScreen'));}}
  }}
}});
p5['{0}'].on('change',function (cMirror) {{
  var el = p5.$('{0}').el;
  el.value = cMirror.getValue();
  var anc = el.parentElement;
  var dirty = anc.querySelectorAll('[data-field=""dirty-flag""]')[0];
  dirty.value = cMirror.isClean() ? 'clean' : 'dirty';
}});
p5['{0}'].setSize('100%', '{5}');"
              :x:/../*/_event?value
              :x:/@p5.io.unroll-path?value
              :x:/@.theme?value
              :x:/@.line-numbers?value
              :x:/@.auto-focus?value
              :x:/@.height?value
              :x:/@.mode?value
              :x:/@_keys?value
              :x:/@.tab-size?value
              :x:/@.read-only?value

            /*
             * Contains [oninit] passed in during creation.
             */
            .oninit
            eval-x:x:/+/*
            eval:x:/@.oninit
              _event:x:/../*/_event?value
