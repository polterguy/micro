
/*
 * Creates the __[micro.widgets.mysql.datagrid]__ extension widget.
 */

/*
 * This extension widget wraps a MySQL table, solving most of the things
 * related to databinding it automatically. The widget supports the following arguments.
 *
 * - __[database]__ - Which database to databind your datagrid towards. This argument it mandatory.
 * - __[table]__ - Which table to databind your datagrid towards. This argument is mandatory.
 * - __[columns]__ - Collection of which columns your datagrid should have. This argument is mandatory.
 * - __[page-size]__ - How many items your datagrid should retrieve during databind invocations. This argument is optional, and defaults to 10.
 * - __[databind]__ - If you declare this argument, and set its value to boolean _"false"_, the datagrid will _not_ be initially databound. This argument is optional, and it defaults to _"true"_.
 *
 * In addition to the above arguments, this widget also supports the following
 * optional arguments. These arguments are only used during the _initial_ databind
 * invocation, and are passed _"as is"_ to __[micro.widgets.mysql.datagrid.databind]__,
 * as it is being invoked when your datagrid is created. See the documentation
 * for the __[micro.widgets.mysql.datagrid.databind]__ widget lambda event further
 * down to understand these arguments.
 *
 * - __[filter]__ - Filter for _initial_ databind invocation. This argument is optional.
 * - __[page]__ - Page for _initial_ databind invocation. This argument is optional.
 * - __[sort-by]__ - Sorting for _initial_ databind invocation. This argument is optional.
 * - __[sort-direction]__ - Sorting direction for _initial_ databind invocation. This argument is optional.
 *
 * All other arguments are applied to the main __[micro.widgets.grid]__ widget, that's
 * returned from this Active Event. If no explicit __[class]__ argument is supplied,
 * a default value of _"striped"_ will be assumed, creating a striped table.
 * The database, table, and page-size arguments are pretty self explanatory - But
 * the __[columns]__ argument require some explanation, since it's really quite
 * powerful, and allows you to among other things provide a widget __[.lambda]__
 * template for your cells.
 *
 * ### The [columns] argument explained
 *
 * The simplest way to databind your datagrid, is to provide your __[columns]__
 * argument as a simple collection of named columns from your database, such as
 * the following illustrates.
 *
 * ```
 * columns
 *   name
 *   email
 *   phone
 * ```
 *
 * The above would create your datagrid with three columns, containing the values
 * from your _"name"_, _"email"_ and _"phone"_ columns from your MySQL table.
 * However, you can also declare your columns as a _"widget lambda object"_, that
 * allows you to dynamically create your own cell's content for these columns as
 * a __[widgets]__ collection, according to the given row. You can do this by
 * instead of adding a simple column declaration such as we did above, declare
 * your column with a __[.lambda]__ argument, which will be evaluated, with the
 * __[row]__ argument for the currently iterated row from your database. Below
 * is an example.
 *
 * ```
 * columns
 *   Surname
 *     .lambda
 *
 *       // Will be evaluated with a [row] argument.
 *       // Return any widgets you wish here.
 *       return
 *         button
 *           innerValue:Some expression leading to your [row] ...?
 * ```
 *
 * If you did something such as the above, you could make your _"Surname"_
 * become a rich widget hierarchy by itself.
 * **Notice**, your __[.lambda]__ columns does not need to match an
 * existing actual column in your database, since they do not become a part of
 * your SQL when selecting items from your database. See the main documentation
 * for Micro for an example of creating __[.lambda]__ columns.
 *
 * You can also supply a __[visible]__ argument to your __[columns]__ items,
 * and set its value to boolean _"false"_, at which point the column will become
 * a part of your SQL query, but it will not have a column in your datagrid.
 * This is useful if you for instance have an ID column you need to fetch in your
 * SQL, but you do not want to display it in the datagrid as a column.
 *
 * In addition to the above arguments, you can also supply a __[.header]__
 * argument to your __[columns]__ items, which can contain any sub arguments of
 * itself. These sub arguments will be applied _only_ to the header of your
 * datagrid, allowing you to change how the headers for your columns are created.
 * This allows you to override for instance the __[style]__ or __[class]__
 * properties of your datagrid's headers, in addition to that if you supply a
 * __[widgets]__ collection as an argument to your __[.header]__ argument, this
 * widgets collection will be rendered instead of a simple label, allowing you
 * to for instance create your datagrid's headers as buttons, etc - Which is
 * useful for implementing things such as sorting, etc.
 *
 * All other arguments beneath each of your __[columns]__ will be appended into
 * your individual cells, allowing you to for instance override the __[class]__
 * or __[style]__ attributes/properties for your cells, or provide __[onclick]__
 * event handlers for instance to your individual cells - Although the latter is
 * arguably more semantically correct implemented by creating a __[.lambda]__ column
 * that returns a button or a hyperlink.
 *
 * ### Databinding your datagrid
 *
 * To databind your datagrid, you can invoke the __[micro.widgets.mysql.datagrid.databind]__
 * widget lambda event. This event takes the following arguments.
 *
 * - __[\_arg]__ - The ID of your datagrid.
 * - __[filter]__ - An SQL _"where"_ clause, such as e.g. `name like @name` or `email = @email and phone = @phone`. Supply your SQL arguments as named arguments to your __[filter]__ argument.
 * - __[page]__ - What _"page"_ in your dataset to databind the datagrid towards.
 * - __[sort-by]__ - What column to order your results by.
 * - __[sort-direction]__ - What direction to order you results by. This can only be _"asc"_ implying ascending and _"desc"_ implying descending. This argument defaults to _"asc"_.
 * - __[keep-items]__ - If you declare this, and set its value to boolean _"true"_, the databind operation will instead of deleting the old items, append its new items to the grid.
 *
 * An example of applying these arguments to your databind invocation can be found below.
 *
 * ```
 * micro.widgets.mysql.datagrid.databind:your-datagrids-id
 *   filter:name like @name
 *     @name:%john%
 *   page:1
 *   sort-by:name
 *   sort-direction:desc
 * ```
 *
 * The above invocation will retrieve only items with a _"name"_ value containing
 * _"john"_, and it will start fetching from _"page"_ 1 - Which implies that it
 * will get the records from 10-20 if your __[page-size]__ is 10. The __[page]__
 * argument implies an _"offset"_ of __[page-size]__ multiplied by __[page]__.
 * This implies that if you have a __[page-size]__ of 25, and a __[page]__ value
 * of 2, it will retrieve the items ranging from 50 to 75. In addition, the above
 * invocation will order your results by the _"name"_ column descending.
 *
 * The __[micro.widgets.mysql.datagrid.databind]__ lambda event will return a
 * __[count]__ and a __[more-pages]__ value to caller, indicating the total
 * number of items with the given (optional) filter criteria. The __[more-pages]__
 * return value will only be true if there are more pages in your dataset, matching
 * the given (optional) filter.
 *
 * **Notice**, the datagrid is initially databound when it is created, unless you
 * supply a __[databind]__ argument, and set its value to boolean _"false"_ - So you
 * only need to (re) databind it if you want to page, or change its filter condition.
 */
create-event:micro.widgets.mysql.datagrid

  /*
   * Signal node, to separate arguments from the rest of our lambda.
   */
  .signal

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    database:string
    table:string
    columns
  micro.lambda.contract.optional:x:/..
    page-size:long
    filter:string
    page:long
    sort-by:string
    sort-direction:string

  /*
   * Default arguments.
   */
  .defaults
    page-size:long:10
    filter
    page:long:0
    class:striped
    sort-direction:asc

  /*
   * Adding all columns to our databind grid lambda event.
   */
  add:x:/../*/return/**/micro.widgets.mysql.datagrid.databind/*/.columns
    src:x:/../*/columns/*

  /*
   * Creating columns for our datagrid.
   */
  for-each:x:@"/../*/columns/*(!/*/visible/""=:bool:false""/.)"

    /*
     * Adding column to grid below.
     */
    set:x:/+2/*/*/foo?name
      src:x:/@_dp/#?name
    add:x:/+/*/*
      src:x:/@_dp/#/*/.header/*
    add:x:/../*/return/*/micro.widgets.grid/*/columns
      src
        foo

  /*
   * Adding initial [filter] and [page].
   */
  add:x:/../*/return/*/*/oninit/*/.initial
    src:x:(/../*/filter|/@.defaults/*/filter|/../*/page|/@.defaults/*/page|/../*/sort-by|/../*/sort-direction|/@.defaults/*/sort-direction)/$

  /*
   * Adding all other arguments.
   */
  add:x:/../*/return/*
    src:x:(/@.signal/--/<-|/@.defaults/*)(!/columns!/database!/table!/page-size!/filter!/page!/sort-by!/sort-direction!/oninit)/$

  /*
   * Applying any [oninit] arguments supplied.
   */
  add:x:/../*/return/*/*/oninit/*/.oninit
    src:x:/@.signal/--/oninit/*

  /*
   * Checking if [databind] was given as a "false" boolean, at which point
   * we avoid databinding the datagrid initially.
   */
  if:x:/../*/databind?value
    =:bool:false

    /*
     * No initial databinding should occur.
     */
    set:x:/../*/return/*/*/oninit/*/[0,3]

  /*
   * Returning widget to caller.
   */
  eval-x:x:/+/**/micro.widgets.mysql.datagrid.databind/*(/.table|/.database|/.columns|/.page-size)
  return
    micro.widgets.grid
      events

        /*
         * Databinds datagrid.
         *
         * Optionally pass in [page], [filter], [sort-by] and [sort-direction].
         *
         * This widget lambda event will return a [count] value, implying how many
         * items exists in table in total that are matching the (optional) [filter],
         * in addition to a [more-pages] value, indicating if there are more pages
         * in the dataset.
         */
        micro.widgets.mysql.datagrid.databind

          /*
           * Making sure invocation is for our current grid.
           */
          if:x:/../*/_event?value
            !=:x:/../*/_arg?value

            /*
             * Not our guy!
             */
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.optional:x:/..
            page:long
            filter
            sort-by:string
            sort-direction:string
            keep-items:bool

          /*
           * Defaults if no argument(s) are given.
           */
          .defaults
            sort-direction:asc

          /*
           * Forward declared further up.
           *
           * [.columns] contains all columns as declared by caller.
           */
          .columns
          .table:x:/../*/table?value
          .database:x:/../*/database?value
          .page-size:x:(/../*/page-size|/../*/.defaults/*/page-size)/$?value.long

          /*
           * Figuring out which columns to use in our SQL.
           *
           * Notice, we only use columns that have no [.lambda] argument in our
           * SQL.
           */
          .database-columns
          set:x:/-?value
            join:x:/@.columns/*(!/*/.lambda/.)?name
              sep:,
              wrap:`

          /*
           * Default arguments.
           */
          .defaults
            page:long:0

          /*
           * Figuring out offset, by multiplying page-size with page.
           */
          .offset
          set:x:/@.offset?value
            *:x:(/../*/page|/@.defaults/*/page)/$?value.long
              _:x:/@.page-size?value

          /*
           * Opening up database connection.
           */
          p5.mysql.connect:[{0}]
            :x:/@.database?value

            /*
             * Figuring out our "order by" parts.
             */
            .order-by
            if:x:/../*/sort-by?value

              /*
               * [sort-by] argument was given.
               */
              set:x:/@.order-by?value
                src:order by `{0}` {1}
                  :x:/../*/sort-by?value
                  :x:(/../*/sort-direction|/@.defaults/*/sort-direction)/$?value

            /*
             * Contains our actual SQL.
             */
            .sql

            /*
             * Checking if we should filter results.
             */
            if:x:/../*/filter?value

              /*
               * Filtering our select SQL.
               */
              eval-x:x:/+/*
              set:x:/@.sql?value
                src:select {0} from `{1}` where {2} {3} limit {4} offset {5}
                  :x:/@.database-columns?value
                  :x:/@.table?value
                  :x:/../*/filter?value
                  :x:/@.order-by?value
                  :x:/@.page-size?value
                  :x:/@.offset?value
              add:x:/..p5.mysql.connect/*/p5.mysql.select
                src:x:/../*/filter/*

            else

              /*
               * No filtering.
               */
              eval-x:x:/+/*
              set:x:/@.sql?value
                src:select {0} from `{1}` {2} limit {3} offset {4}
                  :x:/@.database-columns?value
                  :x:/@.table?value
                  :x:/@.order-by?value
                  :x:/@.page-size?value
                  :x:/@.offset?value

            /*
             * Selecting records from table.
             */
            p5.mysql.select:x:/@.sql?value

            /*
             * Looping through each resulting [row] from SQL.
             */
            for-each:x:/@p5.mysql.select/*

              /*
               * Adding main row [item] to databind invocation.
               */
              add:x:/..p5.mysql.connect/*/micro.widgets.grid.databind
                src
                  item

              /*
               * Looping through each column.
               */
              for-each:x:@"/@.columns/*(!/*/visible/""=:bool:false""/.)"

                /*
                 * Adding root cell node for currently iterated cell.
                 */
                add:x:/..p5.mysql.connect/*/micro.widgets.grid.databind/0/-
                  src:x:/@_dp/#?name

                /*
                 * Checking type of column.
                 */
                if:x:/@_dp/#/*/.lambda

                  /*
                   * A "lambda" column, which contains a lambda object, expected
                   * to return some sort of widget hierarchy, given the currently
                   * iterated row as an argument.
                   */
                  add:x:/..if/*/eval
                    src:x:/..for-each/@_dp/#
                  eval:x:/@_dp/#/*/.lambda
                  add:x:/..p5.mysql.connect/*/micro.widgets.grid.databind/0/-/0/-
                    src:widgets
                  add:x:/..p5.mysql.connect/*/micro.widgets.grid.databind/0/-/0/-/0
                    src:x:/@eval/*

                else

                  /*
                   * A normal "database" column, statically databinded towards
                   * the currently iterated row.
                   *
                   * For these types of columns, we simply set the value of the
                   * databind node to the value from our select invocation.
                   */
                  set:x:/..p5.mysql.connect/*/micro.widgets.grid.databind/0/-/0/-?value
                    src:x:/..for-each/@_dp/#/*/{0}?value
                      :x:/@_dp/#?name

                /*
                 * Adding all attributes and properties to cell.
                 *
                 * Notice, we don't add any [.lambda] arguments, since these are
                 * handled especially further up.
                 */
                add:x:/..p5.mysql.connect/*/micro.widgets.grid.databind/0/-/0/-
                  src:x:/@_dp/#/*(!/.lambda)

            /*
             * Databinding our grid, making sure we apply [keep-items] if it was
             * supplied by caller.
             */
            add:x:/+
              src:x:/../*/keep-items
            micro.widgets.grid.databind:x:/../*/_event?value

            /*
             * Figuring out how many items exists matching the specified (optional)
             * [filter].
             */
            .sql
            if:x:/../*/filter?value

              /*
               * Filter was specified.
               */
              eval-x:x:/+/*
              set:x:/@.sql?value
                src:select count(*) from `{0}` where {1}
                  :x:/@.table?value
                  :x:/../*/filter?value
              add:x:/..p5.mysql.connect/*/p5.mysql.scalar
                src:x:/../*/filter/*

            else

              /*
               * Filter was not specified.
               */
              eval-x:x:/+/*
              set:x:/@.sql?value
                src:select count(*) from `{0}`
                  :x:/@.table?value

            /*
             * Executing our count SQL.
             */
            p5.mysql.scalar:x:/@.sql?value

            /*
             * Checking if there are more pages in our dataset.
             */
            .more-pages
            +:x:/../*/.page-size?value
              *:x:/../*/.page-size?value
                _:x:(/../*/page|/@.defaults/*/page)/$?value.long
            if:x:/@p5.mysql.scalar?value
              >:x:/@+?value

              /*
               * There are more pages in dataset.
               */
              set:x:/@.more-pages?value
                src:bool:true

            else

              /*
               * There are no more pages in dataset.
               */
              set:x:/@.more-pages?value
                src:bool:false

            /*
             * Returning [count] and [more-pages] back to caller.
             */
            eval-x:x:/+/*
            return
              count:x:/@p5.mysql.scalar?value
              more-pages:x:/@.more-pages?value

      oninit

        /*
         * Initially databinding of grid.
         */
        .initial
        add:x:/+
          src:x:/@.initial/*
        micro.widgets.mysql.datagrid.databind:x:/../*/_event?value

        /*
         * Contains the [oninit] argument supplied by caller during creation.
         */
        .oninit
        eval:x:/-

      columns
