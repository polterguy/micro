/*
 * Creates an Ajax TreeView widget, which allows for hierarchically browsing relational tree structures, such as for instance a file
 * system, etc.
 *
 * Arguments;
 * 
 * [items]            - Collection of items to show initially as "root items".
 *                      The name of its children nodes is what is displayed to the user, and the value is the "id" of the
 *                      item, used to uniquely identify the item, when the item is clicked for instance, etc.
 *                      Optionally you can supply child nodes for each item, declaring the CSS classes used to display it as [_class-close]
 *                      and [_class-open]. Their default values are "icon folder-close" and "icon folder-open".
 * [.onexpand]        - Callback lambda evaluated when the tree need more items.
 *                      Callback will be given [_item-id] for which item to retrieve children of.
 *                      Callback is expected to return an [items] collection, similarly to when the tree is initially created.
 *                      See [items] above to understand the collection the tree widget expects.
 * [.onselect]        - Callback lambda to invoke when an item is selected. Notice, if the same tree item is clicked twice, a [double-click] will
 *                      be passed in, and its value will be boolean true.
 */
create-event:micro.widgets.tree

  /*
   * Defaults.
   */
  .defaults
    class:micro-widgets-tree

  /*
   * Making sure caller supplied at the very least one item.
   */
  if:x:/../*/items/*
    not
    throw:You have to supply at the very least one root item when creating your tree widget.

  /*
   * Adding initial [items] recursively to return widget.
   */
  eval-x:x:/+/*/*
  add:x:/../*/return/*/container/*/widgets
    micro.widgets.tree._create-items
      items:x:/../*/items

  /*
   * Adding [.onexpand] callback into [micro.widgets.tree._get-items]
   */
  add:x:/../*/return/*/*/events/*/micro.widgets.tree._get-items/*/.lambda
    src:x:/@.defaults/--/.onexpand/*

  /*
   * Adding [.onselect] callback into [micro.widgets.tree._select]
   */
  add:x:/../*/return/*/*/events/*/micro.widgets.tree._select/*/.lambda
    src:x:/@.defaults/--/.onselect/*

  /*
   * Adding all other arguments.
   */
  add:x:/../*/return/*/container
    src:x:(/@.defaults/--(!/_arg!/items!/.onexpand!/.onselect!/oninit)|/@.defaults/*)/$
  add:x:/../*/return/*/container/*/oninit/*/.lambda
    src:x:/@.defaults/--/oninit/*

  /*
   * Returning widget to caller.
   */
  return
    container
      element:nav
      _root-tree
      oninit

        /*
         * Evaluating user defined [oninit] arguments, if there are any.
         */
        .lambda
        eval-x:x:/+/*
        eval:x:/@.lambda
          _event:x:/../*/_event?value

      /*
       * Events for tree widget.
       */
      events


        /*
         * Invoked when tree needs to retrieve children items for a specific tree node.
         * The lambda for this event, is created from the [.onexpand] callback supplied during creation of tree.
         */
        micro.widgets.tree._get-items

          /*
           * First we must make sure this is the tree requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our tree.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Lambda callback supplied during creation of widget.
           */
          .lambda
          add:x:/+
            src:x:/../*/_item-id
          eval:x:/@.lambda
          insert-before:x:
            src:x:/@eval/*


        /*
         * Invoked when items are selected in tree widget.
         */
        micro.widgets.tree._select

          /*
           * First we must make sure this is the tree requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our tree.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Lambda callback supplied during creation of widget.
           */
          .lambda
          add:x:/+
            src:x:/../*(/items|/double-clicked)
          eval:x:/@.lambda
          insert-before:x:
            src:x:/@eval/*

      widgets
