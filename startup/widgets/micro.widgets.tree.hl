/*
 * Creates the __[micro.widgets.tree]__ extension widget.
 */

/*
 * This widget allows for hierarchically browsing relational tree structures,
 * such as for instance a file system, etc. Below are the most common arguments
 * for the widget.
 *
 * - __[items]__ - Collection of items to show initially as _"root items"_.
 * The name of its children nodes is what is displayed to the user, and the
 * value is the _"id"_ of the item, used to uniquely identify the item, when
 * the item is clicked for instance, etc. Optionally you can supply child nodes
 * for each item, and declare the CSS classes used to display it as __[\_class-close]__
 * and __[\_class-open]__. Their default values are _"icon folder-close"_ and
 * _"icon folder-open"_.
 * - __[.onexpand]__ - An optional callback lambda evaluated when the tree need
 * more items. The callback will be given an __[\_item-id]__ argument for which
 * item it wants to retrieve children for. The callback is expected to return
 * an __[items]__ collection, similar to the one specified when the tree is
 * initially created.
 * - __[.onselect]__ - Callback lambda to invoke when an item is selected. This
 * callback will also be given an __[items]__ collection, with one value for
 * each item that was selected.
 *
 * All other arguments are passed in _"as is"_. The widget's default CSS class,
 * unless overridden, is _"micro-widgets-tree"_. If you want to render the widget
 * as a _"menu/navbar"_ type of widget, instead of like a traditional treeview,
 * you can override its CSS class and set it to `micro-widgets-tree-navbar`.
 */
create-event:micro.widgets.tree

  /*
   * Defaults.
   */
  .defaults
    class:micro-widgets-tree

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    items
  micro.lambda.contract.optional:x:/..
    .onexpand
    .onselect

  /*
   * Making sure caller supplied at the very least one item.
   */
  if:x:/../*/items/*
    not
    throw:You have to supply at the very least one root item when creating your tree widget.

  /*
   * Adding initial [items] recursively to return widget.
   */
  eval-x:x:/+/*/*
  add:x:/../*/return/*/container/*/widgets
    micro.widgets.tree._create-items
      items:x:/../*/items

  /*
   * Adding [.onexpand] callback into [micro.widgets.tree._get-items]
   */
  add:x:/../*/return/*/*/events/*/micro.widgets.tree._get-items/*/.lambda
    src:x:/@.defaults/--/.onexpand/*

  /*
   * Adding [.onselect] callback into [micro.widgets.tree._select]
   */
  add:x:/../*/return/*/*/events/*/micro.widgets.tree._select/*/.lambda
    src:x:/@.defaults/--/.onselect/*

  /*
   * Adding all other arguments.
   */
  add:x:/../*/return/*/container
    src:x:(/@.defaults/--(!/_arg!/items!/.onexpand!/.onselect!/oninit)|/@.defaults/*)/$
  add:x:/../*/return/*/container/*/oninit/*/.lambda
    src:x:/@.defaults/--/oninit/*

  /*
   * Returning widget to caller.
   */
  return
    container
      element:nav
      _root-tree
      oninit

        /*
         * Evaluating user defined [oninit] arguments, if there are any.
         */
        .lambda
        eval-x:x:/+/*
        eval:x:/@.lambda
          _event:x:/../*/_event?value

      /*
       * Events for tree widget.
       */
      events


        /*
         * Invoked when tree needs to retrieve children items for a specific tree node.
         * The lambda for this event, is created from the [.onexpand] callback supplied during creation of tree.
         */
        micro.widgets.tree._get-items

          /*
           * First we must make sure this is the tree requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our tree.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Lambda callback supplied during creation of widget.
           */
          .lambda
          add:x:/+
            src:x:/../*/_item-id
          eval:x:/@.lambda
          insert-before:x:
            src:x:/@eval/*


        /*
         * Invoked when items are selected in tree widget.
         */
        micro.widgets.tree._select

          /*
           * First we must make sure this is the tree requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our tree.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Lambda callback supplied during creation of widget.
           */
          .lambda
          add:x:/+
            src:x:/../*(/items|/double-clicked)
          eval:x:/@.lambda
          insert-before:x:
            src:x:/@eval/*

      widgets
