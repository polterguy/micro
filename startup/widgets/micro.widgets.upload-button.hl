/*
 * Creates the __[micro.widgets.upload-button]__ extension widget.
 */

/*
 * This widget allows you to easily handle uploading of file(s) in your modules.
 *
 * Pass in __[.onupload]__ as a lambda callback for what to do when one or more
 * files have been uploaded. Optionally pass in __[multiple]__ to allow for
 * multiple files being uploaded, and/or an __[accept]__ argument, which is a
 * comma separated list of legal file extensions, such as for instance
 * _".png,.jpg,.jpeg,.gif"_. All other arguments will become attributes/properties
 * of the actual button itself. This allows you to for instance override its
 * __[class]__ and __[style]__ attributes.
 *
 * Notice, the button will be rendered with a span _"icon-upload2"_ icon as a
 * child element. If you want to change the icon, you can do this by styling your
 * widget, by for instance using a custom CSS class.
 *
 * Notice, when one or more files have been uploaded, your __[.onupload]__
 * lambda callback will be evaluated, with a __[files]__ collection, with each file
 * as physically existing on disc as a child of this list, and its original
 * filename as a child of each physical file. This is necessary to make sure we
 * have unique physical filenames on our server, to avoid having different files
 * overwrite each other. An example of how this might look like can be found below.
 *
 * ```
 * files
 *   physical-file:/users/root/temp/865afc-foo.jpg
 *     original-filename:foo.jpg
 *   physical-file:/users/root/temp/fea567-todo.txt
 *     original-filename:todo.txt
 * ```
 *
 * The __[physical-file]__ parts above is the file, as it physically exists on
 * your server, and the __[original-filename]__ is the name of the file as it
 * was on the client. You are responsible for moving your file yourself, by
 * invoking e.g. __[move-file]__ or something similar, if you want to keep your
 * file somewhere on your server. The **[physical-file]** name is created as a
 * globally unique random string. All files are uploaded by default to your user's
 * _"/temp/"_ folder.
 */
create-event:micro.widgets.upload-button

  /*
   * Signal node, to separate arguments from the rest of our lambda.
   */
  .signal

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    .onupload
  micro.lambda.contract.optional:x:/..
    filter:string

  /*
   * Parametrizing our button.
   */
  add:x:/../*/return/*/button
    src:x:/@.signal/--/<-(!/.onupload!/multiple!/accept)
  add:x:/../*/return/*/button/*/widgets/*/input
    src:x:/@.signal/--(/multiple|/accept)
  add:x:/../*/return/**/.onupload
    src:x:/@.onupload

  /*
   * Checking if (another) upload-button widget has previously created a "cover" widget,
   * and if not, making sure we create one, to use during uploads.
   */
  if
    fetch:x:/0/0?value
      widget-exists:micro-widgets-upload-button-common-cover
    =:bool:false

    /*
     * Creating a common "cover" widget, which is initially created invisible,
     * and only shown as an import is initiated.
     */
    create-widgets
      micro.widgets.cover:micro-widgets-upload-button-common-cover
        message:Please wait while your file is uploaded and processed ...
        style:"display:none;"

  /*
   * Returning actual button to caller.
   */
  return
    button
      onclick:@"if(event.target.tagName!='INPUT'){this.getElementsByTagName('input')[0].click();return false;}"
      oninit

        /*
         * Making sure se set a server-side signal indicating that there's an upload button on page.
         */
        p5.web.session.set:micro.widgets.upload-button
          src:bool:true

        /*
         * Including JavaScript that creates our upload request.
         */
        p5.web.include-javascript:@"p5.micro_widgets_upload_button = function (self) {
  if(self.files.length == 0) {
    return;
  }
  var xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (this.readyState == XMLHttpRequest.DONE) {
      if (this.status == 200) {
        var responseText = this.responseText;
        p5.$(self).raise('.onupload',{
          onbefore: function (pars, evt){pars.push(['micro.widgets.upload-widget.files', responseText]);},
          onsuccess: function () {p5.$('micro-widgets-upload-button-common-cover').el.style.display = 'none';},
          onerror: function (serverReturn, code, response) {p5.$('micro-widgets-upload-button-common-cover').el.style.display = 'none';alert(response);}
        });
      } else {
        alert(this.responseText);
      }
    }
  };
  p5.$('micro-widgets-upload-button-common-cover').el.style.display = 'block';
  xhr.open('POST', '/micro/upload', true);
  var fd = new FormData();
  for (var i = 0; i < self.files.length; i++) {
    fd.append('file' + i, self.files[i]);
  }
  self.value = '';
  xhr.send(fd);
}"
      widgets
        literal
          element:span
          class:icon-upload2
        input
          type:file
          tabindex:-1
          class:micro-widgets-upload-input
          onchange:@"p5.micro_widgets_upload_button(this);"
          .onupload

            /*
             * Retrieving files that were successfully uploaded, and passing them into our
             * onuploaded lambda event.
             */
            p5.web.post.get:micro.widgets.upload-widget.files
            json2lambda:x:/-/*?value
            for-each:x:/@json2lambda/*/*?value
              add:x:/../*/try/*/eval/*/files
                src:@"physical-file:""{0}"""
                  :x:/@_dp?value
              split:x:/@_dp?value
                =:/
              split:x:/@split/0/-?name
                =:int:33
              add:x:/../*/try/*/eval/*/files/0/-
                src:@"original-filename:""{0}"""
                  :x:/@split/0/-?name

            /*
             * Invoking lambda callback supplied by caller.
             * Notice, [.onupload] is the widget's lambda callback that was automatically
             * added to this lambda further up, before widget was created.
             */
            add:x:/../*/try/*/eval
              src:x:/../*(/files|/_event)
            try
              eval:x:/../*/.onupload
                files
            catch
              p5.web.response.set-status-code:406
              p5.web.echo:x:/@message?value
              return
