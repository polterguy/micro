/*
 * Creates the __[micro.widgets.chart.bar]__ _"bar chart widget"_.
 *
 * This widget allows you to display a bar chart with vertical bars, where each bar has
 * a height relative to its value.
 */
create-event:micro.widgets.chart.bar

  /*
   * Signal node, to separate arguments from the rest of our lambda.
   */
  .signal

  /*
   * Defaults, if no arguments are given.
   */
  .defaults
    class:micro-widgets-chart-bar

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    data

  /*
   * Finding max value of [data] values, such that we know what scale to use
   * for our chart.
   */
  .max:double:0
  for-each:x:/../*/data/*
    if:x:/@_dp/#?value.double
      >:x:/@.max?value
      set:x:/@.max?value
        src:x:/@_dp/#?value.double

  /*
   * Making sure we set the viewport width to 2 times the height.
   */
  .viewport-width
  set:x:/-?value
    *:x:/@.max?value.double
      _:2
  .viewport-width-room
  set:x:/-?value
    /:x:/@.viewport-width?value
      _:15

  /*
   * Figuring out font-size to use for labels.
   */
  .font-size
  set:x:/-?value
    /:x:/@.viewport-width-room?value
      _:4

  /*
   * Drawing y-axis lines and numbers.
   */
  .step
  set:x:/-?value
    /:x:/@.max?value.int
      _:5
  .idx-y:int:0
  while:x:/@.idx-y?value
    <:x:/@.max?value.int
    .val
    set:x:/-?value
      -:x:/@.max?value
        _:x:/@.idx-y?value
    .y
    set:x:/-?value
      -:x:/@.idx-y?value
        /:x:/@.step?value
          _:50
    if
      -:x:/@.max?value.int
        _:x:/@.idx-y?value.int
      <:x:/@.step?value.int
      break
    eval-x:x:/+/**
    add:x:/../*/return/*/container/*/widgets
      src
        literal
          element:line
          x1:0
          y1:x:/@.idx-y?value
          x2:x:/@.viewport-width?value
          y2:x:/@.idx-y?value
          class:line
        literal
          element:text
          x:"-{0:#.##}"
            :x:/@.viewport-width-room?value
          y:x:/@.y?value
          width:x:/@.viewport-width-room?value
          height:x:/@.step?value
          class:label
          innerValue:x:/@.val?value
          style:"font-size:{0}px;"
            :x:/@.font-size?value
    set:x:/@.idx-y?value
      +:x:/@.idx-y?value
        _:x:/@.step?value

  /*
   * Figuring out width for each bar column.
   *
   * Notice, we multiply the width time 0.9, to give some spacing
   * between each bar column.
   */
  .bar-width
  set:x:/-?value
    /:x:/@.viewport-width?value
      *:x:/../*/data/*?count
  set:x:/@.bar-width?value
    *:x:/@.bar-width?value
      _:.9

  /*
   * Calculating y for labels.
   */
  .labels-y
  set:x:/-?value
    +:x:/@.max?value
      _:10

  /*
   * Iterating through each [data] argument, and creating one bar for each,
   * keeping track of our x position as we proceed forwards.
   */
  .x:long:1
  for-each:x:/../*/data/*

    /*
     * Figuring out y position of bar.
     */
    .y
    set:x:/-?value
      -:x:/@.max?value.double
        _:x:/@_dp/#?value

    /*
     * Checking if item has an explicit color.
     */
    if:x:/@_dp/#/*/color

      /*
       * Adding color for currently iterated bar.
       */
      eval-x:x:/+/*/*
      add:x:/..for-each/*/add/[0,1]/*/*
        src
          fill:x:/@_dp/#/*/color?value

    /*
     * Adding bar to returned widget.
     */
    eval-x:x:/+/*/*/*(/width|/height|/x|/y)
    add:x:/../*/return/*/container/*/widgets
      src
        literal
          element:rect
          class:bar
          width:"{0:#.##}"
            :x:/@.bar-width?value
          height:x:/@_dp/#?value
          x:"{0:0.##}"
            :x:/@.x?value
          y:"{0:0.##}"
            :x:/@.y?value

    /*
     * Applying all arguments for currently iterated [data] item to its label.
     */
    add:x:/..for-each/**/foreignObject/**/label
      src:x:/@_dp/#/*

    /*
     * Checking if caller provided an [onclick] event handler for currently
     * iterated item, atwhich point we transform label to a hyperlink, to
     * stay semantically correct.
     */
    if:x:/@_dp/#/*/onclick

      /*
       * Using a hyperlink label.
       */
      add:x:/..for-each/**/foreignObject/**/label
        src
          href:#
      set:x:/..for-each/**/foreignObject/**/label?name
        src:a

    /*
     * Adding currently iterated label as a "foreignObject" to returned SVG widget.
     */
    eval-x:x:/+/**
    add:x:/../*/return/*/container/*/widgets
      src
        foreignObject
          x:"{0:0.##}"
            :x:/@.x?value
          y:x:/@.labels-y?value
          width:"{0:#.##}"
            :x:/@.bar-width?value
          widgets
            label
              innerValue:x:/@_dp/#?name
              style:"font-size:{0}px;"
                :x:/@.font-size?value
              title:{0} - {1}
                :x:/@_dp/#?name
                :x:/@_dp/#?value

    /*
     * Incrementing [x] offset.
     *
     * "Reversing" our above 0.9 multiplication, and adding to x offset
     * as we proceed.
     */
    set:x:/@.x?value
      +:x:/@.x?value
        *:x:/@.bar-width?value
          _:1.1111111

  /*
   * Calculating viewport height, adding room for our
   * labels below our bar columns.
   */
  .viewport-height
  set:x:/-?value
    *:x:/@.max?value
      _:1.3

  /*
   * Creating a negative start for viewport, to make sure we
   * get some room at the top of our largest bar column
   */
  .viewport-y
  set:x:/-?value
    /:x:/@.max?value.double
      _:5

  /*
   * Adding room for viewport width.
   */
  set:x:/@.viewport-width?value
    +:x:/@.viewport-width?value
      _:x:/@.viewport-width-room?value

  /*
   * Returns widget to caller, applying arguments.
   */
  add:x:/../*/return/*/container
    src:x:(/../*/class|/@.defaults/*/class)/$
  eval-x:x:/+/*/*/viewbox
  return
    container
      element:svg
      viewbox:"-{0:#.##} -{1:#.##} {2:#.##} {3:#.##}"
        :x:/@.viewport-width-room?value
        :x:/@.viewport-y?value
        :x:/@.viewport-width?value
        :x:/@.viewport-height?value
      widgets
