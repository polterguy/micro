/*
 * Creates the __[micro.widgets.chart.pie]__ _"pie chart widget"_.
 *
 * The pie chart widget allows you to illustrate a chart, with data items,
 * where each value of your data items, occupies some percentage of the entire circle,
 * resuling in a _"pie slice"_, according to how large its data value is, in
 * relationship to the sum of all your data items.
 * Supply your data items as **[data]** collection, with a label/value type of collection.
 *
 * Optionally pass in **[has-legend]**, and set its value to boolean _"false"_, if you
 * do not want to have a legende associated with your pie chart. By default a legend
 * will be created, and it will occupy 30% of your chart's width. The width is calculated
 * according to its parent element, unless explicitly overridden with for instance a style
 * argument, and the chart as a whole will behave roughly like a div - Filling the available
 * space.
 *
 * The **[data]** items you supply does not need to add up to 100, they can be any numbers
 * you happen to have. The widget will calculate the relative values for each data item,
 * in comparison to the total value of all your items, and create a pie slice accordingly,
 * matching your items' values.
 *
 * You can also override the color of each data child, by providing a **[color]** argument,
 * at which point your item will be rendered with the specified color. The default colors goes
 * from dark blue, to light blue, unless overridde in your Micro skin file.
 * If you provide more than 7 data items, the colors will be _"reused"_, so it is probably
 * wise to provide your own colors if you have more than 7 slices in your _"pie"_.
 *
 * All other arguments will be passed in _"as is"_, implying you can override its CSS class,
 * create **[onclick]** event handlers for your chart, override style properties, etc.
 */
create-event:micro.widgets.chart.pie

  /*
   * Signal node, to separate arguments from the rest of our lambda.
   */
  .signal

  /*
   * Defaults, if no arguments are given.
   */
  .defaults
    class:micro-widgets-chart-pie
    has-legend:bool:true

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    data

  /*
   * Calculating total amount of all [data] elements supplied.
   */
  .total:double:0
  for-each:x:/../*/data/*?value
    set:x:/@.total?value
      +:x:/@.total?value.double
        _:x:/@_dp?value

  /*
   * Looping through each [data] value, creating one "slice" for each [data] item,
   * making sure we store how much we need to rotate each pie, to offset rotation
   * from previous pie.
   */
  .current-angle:double:270
  for-each:x:/../*/data/*

    /*
     * Figuring out how much the currently iterated pie is of our total percentage.
     */
    /:x:/@_dp/#?value.double
      _:x:/@.total?value

    /*
     * Checking if color provided an explicit [color] for slice.
     */
    if:x:/@_dp/#/*/color
      eval-x:x:/+/**
      add:x:/..for-each/*/add/[1,2]/**/literal
        src
          stroke:x:/@_dp/#/*/color?value

    /*
     * Adding currently iterated pie piece to return widget.
     *
     * Notice, we apply all arguments to the pie slice for currently
     * iterated [data] item, except any [on-xxx] event handlers, which are
     * only added to the legend label.
     */
    add:x:/+2/**/literal
      src:x:/@_dp/#/*(!/color!/~on)
    eval-x:x:/+/**/style
    add:x:/../*/return/*/container/*/widgets
      src
        svg
          class:piece
          viewbox:"0 0 100 100"
          style:"transform: rotate({0}deg);"
            :x:/@.current-angle?value
          widgets
            literal
              element:circle
              r:25
              cx:50
              cy:50
              width:100
              height:100
              style:"stroke-dasharray:calc({0:#.####} * 157.07963) 157.07963;"
                :x:/..for-each/*/\/?value
    set:x:/@.current-angle?value
      +:x:/@.current-angle?value
        *:x:/..for-each/*/\/?value
          _:360

  /*
   * Checking if caller wants to have a legend for the pie chart.
   */
  if:x:(/../*/has-legend|/@.defaults/*/has-legend)/$?value.bool
    =:bool:true

    /*
     * Making sure we add up has-legend CSS class to default value.
     */
    set:x:/@.defaults/*/class?value
      src:{0} has-legend
        :x:/@.defaults/*/class?value

    /*
     * Adding labels to return widget.
     */
    *:x:/../*/data/*?count
      _:20
    +:x:/-?value
      _:30
    eval-x:x:/+/**
    add:x:/../*/return/*/container/*/widgets
      src
        svg
          class:labels
          height:x:/@+?value
          widgets
    .no:int:1
    for-each:x:/../*/data/*

      /*
       * Inreamenting item counter, such that we can make sure each item
       * gets a y position that doesn't overlap the previous item.
       */
      *:x:/@.no?value
        _:20

      /*
       * Checking if an explicit color was supplied for currently
       * iterated item.
       */
      if:x:/@_dp/#/*/color?value
        eval-x:x:/+/**
        add:x:/..for-each/*/add/*/*/literal/[0,1]
          src
            fill:x:/@_dp/#/*/color?value

      /*
       * Adding any additional items to our actual label for our legend item.
       */
      add:x:/..for-each/*/add/*/*/container/**/span
        src:x:/@_dp/#/*

      /*
       * Checking if caller supplied an [onclick], at which point we
       * transform our label to a hyperlink.
       */
      if:x:/@_dp/#/*/onclick
        add:x:/..for-each/*/add/*/*/container/**/span
          src
            href:#
        set:x:/..for-each/*/add/*/*/container/**/span?name
          src:a
      eval-x:x:/+/**
      add:x:/../*/return/*/container/*/widgets/0/-/*/widgets
        src
          literal
            element:rect
            x:20
            y:x:/@*?value
            width:15
            height:15
          container
            element:foreignObject
            x:45
            y:x:/@*?value
            width:10
            widgets
              body
                widgets
                  span
                    innerValue:x:/@_dp/#?name
      set:x:/@.no?value
        +:x:/@.no?value
          _:1

  /*
   * Applying defaults to returned SVG element.
   */
  add:x:/../*/return/*/container
    src:x:(/@.signal/--|/@.defaults/*)/$(!/data!/size!/has-legend)
  eval-x:x:/+/*/*/style
  return
    container
      widgets
