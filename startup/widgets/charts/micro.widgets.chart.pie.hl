/*
 * Creates the __[micro.widgets.chart.pie]__ _"pie chart extension widget"_.
 */

/*
 * The pie chart widget allows you to illustrate a pie chart, with data items,
 * where each value of your data items creates a _"pie slice"_, with a relative size,
 * according to the sum of all data items.
 *
 * Supply your data items as **[data]** collection, with a label/value type of collection.
 * The label is the name of your data item, and the value is its (number) value.
 *
 * Optionally pass in **[legend]**, and set its value to boolean _"false"_, if you
 * do not want to have a legend associated with your pie chart. By default a legend
 * will be created, and it will occupy 40% of your chart's width.
 *
 * All arguments beneath the optional __[legend]__ argument will be appended as
 * arguments to your legend widget. All arguments beneath the optional __[pie]__
 * argument will be appended to your actual pie widget. This allows you to (for instance)
 * override style properties, both for the pie itself, and the legend.
 *
 * All arguments beneath the main __[micro.widgets.chart.pie]__ node, will be
 * appended to the main root widget, which is a _"div"_ element, allowing you to
 * for instance create DOM events for the widget as a whole, and/or modify its
 * CSS class, etc.
 *
 * The width of the pie chart is calculated according to its parent element, unless
 * explicitly overridden with for instance a style argument. The chart as a whole
 * will behave roughly like a div - Filling the available space, unless overridden
 * with an explicit style element, or changed by overriding the chart's CSS class.
 *
 * The **[data]** items you supply does not need to add up to 100, they can be any numbers
 * you happen to have. The widget will calculate the relative values for each data item,
 * in comparison to the total value of all your items, and create a pie slice accordingly,
 * matching your items' values.
 *
 * You can also override the color of each data child, by providing a **[color]** argument
 * to your **[data]** items, at which point your item will be rendered with the specified
 * color. The default colors goes from light gray, to darker gray, and are calculated
 * automatically for you, evenly distributed between light gray to dark gray.
 */
create-event:micro.widgets.chart.pie

  /*
   * Signal node, to separate arguments from the rest of our lambda.
   */
  .signal

  /*
   * Defaults, if no arguments are given.
   */
  .defaults
    class:micro-widgets-chart-pie
    legend:bool:true

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    data
  micro.lambda.contract.optional:x:/..
    legend:bool

  /*
   * Calculating total amount of all [data] element values supplied.
   */
  .total:double:0
  for-each:x:/../*/data/*?value
    set:x:/@.total?value
      +:x:/@.total?value.double
        _:x:/@_dp?value

  /*
   * Looping through each [data] value, creating one "slice" for each [data] item,
   * making sure we store how much we need to rotate each pie, to offset rotation
   * from previous pie.
   */
  .cur-angle:double:0
  .no:int:0
  for-each:x:/../*/data/*

    /*
     * Figuring out how much the currently iterated "slice" is of our total sum.
     * This results in a double between 0 and 1, where 1 == 100% and zero = 0%.
     */
    /:x:/@_dp/#?value.double
      _:x:/@.total?value

    /*
     * Checking if caller provided an explicit [color] for slice.
     */
    if:x:/@_dp/#/*/color

      /*
       * An explicit color was supplied.
       */
      eval-x:x:/+/**
      add:x:/..for-each/*/add/**/literal
        src
          stroke:x:/@_dp/#/*/color?value

    else

      /*
       * Calculating color in gray scale, according to how many items we have.
       */
      .color
      set:x:/-?value
        -:double:225
          *:x:/@.no?value
            /:double:100
              _:x:/../*/data/*?count
      eval-x:x:/+/*/*
      add:x:/..for-each/*/add/**/literal
        src
          stroke:"rgb({0:#},{0:#},{0:#})"
            :x:/@.color?value

    /*
     * Incrementing current angle by size of slice, and data item
     * iterater count by 1.
     */
    set:x:/@.cur-angle?value
      +:x:/@.cur-angle?value
        _:x:/..for-each/*/\/?value
    set:x:/@.no?value
      +:x:/@.no?value
        _:1

    /*
     * Adding currently iterated "slice" to SVG return widget.
     *
     * Notice, we don't apply any arguments to the pie slices, except the [color]
     * since these are applied to (only) the "legend" element(s).
     */
    *:x:/..for-each/*/\/?value
      _:double:157.07963
    -:double:157.07963
      _:x:/@*?value
    *:x:/@.cur-angle?value
      _:double:157.07963
    eval-x:x:/+/*/*
    add:x:/..for-each/*/add/*/*/literal
      src
        style:"stroke-dasharray: {0:0.####} {1:0.####}; stroke-dashoffset: {2:0.####}"
          :x:/@*/@*?value
          :x:/@-?value
          :x:/@*?value

    eval-x:x:/+/**/style
    add:x:/../*/return/**/svg/*/widgets
      src
        literal
          element:circle
          class:slice

  /*
   * Checking if caller wants to have a legend for his pie chart.
   *
   * Notice, unless caller explicitly does not want a legend,
   * a legend is added to the pie chart by default.
   *
   * To explicitly prevent a legend from being created, you can supply a
   * [legend] argument, and set its value to boolean "false".
   */
  if:x:(/../*/legend|/@.defaults/*/legend)/$?value.bool
    =:bool:true

    /*
     * Making sure we add the "has-legend" CSS class on root widget.
     */
    set:x:/@.defaults/*/class?value
      src:{0} has-legend
        :x:/@.defaults/*/class?value

    /*
     * Adding "ul" element wrapping our legend.
     */
    add:x:/../*/return/*/container/*/widgets
      src
        container
          element:ul
          class:legend
          widgets

    /*
     * Iterating through each [data] items, creating one legend label for each.
     */
    .no:int:0
    for-each:x:/../*/data/*

      /*
       * Calculating how large in percentage currently iterated item is.
       */
      /:x:/@_dp/#?value.double
        _:x:/@.total?value
      *:x:/-?value
        _:100

      /*
       * Checking if caller provided an explicit [color] for slice.
       */
      if:x:/@_dp/#/*/color
        eval-x:x:/+/**
        add:x:/..for-each/*/add/**/literal/[0,1]
          src
            style:"background-color: {0};"
              :x:/@_dp/#/*/color?value

      else

        /*
         * Calculating color in gray scale, according to how many items we have.
         */
        .color
        set:x:/-?value
          -:double:225
            *:x:/@.no?value
              /:double:100
                _:x:/../*/data/*?count
        eval-x:x:/+/*/*
        add:x:/..for-each/*/add/**/literal/[0,1]
          src
            style:"background-color:rgb({0:#},{0:#},{0:#});"
              :x:/@.color?value

      /*
       * Adding any additional arguments to our actual label for
       * our currently iterated legend label.
       *
       * Notice, these arguments are added to the "span" widget,
       * and not to the root label for the legend item.
       */
      add:x:/..for-each/*/add/**/literal/[1,2]
        src:x:/@_dp/#/*

      /*
       * Checking if caller supplied an [onclick], at which point we
       * transform our label to an Ajax hyperlink.
       */
      if:x:/@_dp/#/*/onclick

        /*
         * Since an [onclick] event handler was supplied, we render the label
         * for currently iterated legend item as a hyperlink, to stay more
         * semantically correct.
         */
        add:x:/..for-each/*/add/**/literal/[1,2]
          src
            href:#
        set:x:/..for-each/*/add/**/literal/*/element/[1,2]?value
          src:a

      /*
       * Adding currently iterated legend rect and label to the "legend"
       * root widget.
       *
       * Notice, we use a "foreignObject" type of HTML element,
       * in addition to a "span" or "a" element,  since these
       * are more easily styled than "text" SVG items.
       */
      eval-x:x:/+/**
      add:x:/../*/return/*/container/*/widgets/0/-/*/widgets
        src
          container
            element:li
            widgets
              literal
                element:span
                class:legend-label-bg
              literal
                element:span
                class:legend-label
                innerValue:"{0} - {1:#}%"
                  :x:/@_dp/#?name
                  :x:/@*?value

      /*
       * Incrementing data item counter.
       */
      set:x:/@.no?value
        +:x:/@.no?value
          _:1

    /*
     * Applying all [legend] arguments.
     */
    add:x:/../*/return/**/element/=ul/.
      src:x:(/../*/legend|/@.defaults/*/legend)/$/*

  /*
   * Applying all [pie] arguments.
   */
  add:x:/../*/return/**/svg
    src:x:(/../*/pie|/@.defaults/*/pie)/$/*


  /*
   * Applying defaults to returned SVG element.
   */
  add:x:/../*/return/*/container
    src:x:(/@.signal/--|/@.defaults/*)/$(!/data!/legend)
  eval-x:x:/+/*/*/style
  return
    container
      widgets
        svg
          class:pie
          viewbox:"0 0 100 100"
          widgets
