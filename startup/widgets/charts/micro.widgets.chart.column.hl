
/*
 * Creates the __[micro.widgets.chart.column]__ _"column chart extension widget"_.
 */

/*
 * The column chart widget allows you to illustrate a column chart, with data items,
 * where the columns' sizes are automatically calculated relative to each other.
 *
 * Supply your data items as **[data]** collection, with a label/value type of collection.
 * The label is the name of your data item, and the value is its (number) value.
 *
 * Optionally pass in **[name-labels]**, and set its value to boolean _"false"_, if you
 * do not want to have name labels associated with your chart. By default name
 * labels will be added beneath your columns.
 *
 * All arguments beneath the main __[micro.widgets.chart.column]__ node, will be
 * appended to the main root widget, which is a _"div"_ element, allowing you to
 * for instance create DOM events for the widget as a whole, etc.
 *
 * The **[data]** items you supply does not need to add up to 100, they can be any numbers
 * you happen to have. The widget will calculate the relative values for each data item,
 * in comparison to the total value of all your items, and create a column accordingly,
 * matching your items' values.
 *
 * You can also override the color of each data child, by providing a **[color]** argument
 * to your **[data]** items, at which point your item will be rendered with the specified
 * color. The default color of your columns is gray.
 */
create-event:micro.widgets.chart.column

  /*
   * Signal node, to separate arguments from the rest of our lambda.
   */
  .signal

  /*
   * Defaults, if no arguments are given.
   */
  .defaults
    class:micro-widgets-chart-column

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    data

  /*
   * Finding max and min value of [data] values, such that we know what scale to use
   * for our chart, defaulting min value to 0, unless a negative value was supplied.
   *
   * Notice, we need to (also) track the min value, since we want to support negative
   * columns, even though we default it to 0.
   */
  .max:double:0
  .min:double:0
  for-each:x:/../*/data/*

    /*
     * Checking if currently iterated value is larger than the current max value,
     * or smaller than the current min value.
     */
    if:x:/@_dp/#?value.double
      >:x:/@.max?value
      set:x:/@.max?value
        src:x:/@_dp/#?value.double
    else-if:x:/@_dp/#?value.double
      <:x:/@.min?value
      set:x:/@.min?value
        src:x:/@_dp/#?value.double

  /*
   * Figuring out size difference between max and min value, which becomes the
   * total height of our chart.
   */
  .chart-height
  set:x:/@.chart-height?value
    -:x:/@.max?value
      _:x:/@.min?value

  /*
   * Figuring out y position of zero, defaulting to bottom of chart,
   * changing it if there exists a negative value in our dataset.
   */
  .zero-y:double:100
  if:x:/@.min?value
    <:double:0
    set:x:/@.zero-y?value
      *:double:100
        /:x:/@.max?value
          _:x:/@.chart-height?value

  /*
   * Creating our positive lines.
   */
  eval-x:x:/+
  .line-y:x:/@.zero-y?value
  .lbl-text:double:0
  .line-class:zero-line
  .label-class:zero-label
  while:x:/@.line-y?value
    >=:double:0
    eval-x:x:/+/*/*/*
    add:x:/../*/return/*/container/*/widgets/*/svg/*/widgets
      src
        literal
          element:text
          class:x:/@.label-class?value
          x:-1
          y:"{0:0.##}"
            :x:/@.line-y?value
          width:15
          innerValue:"{0:###,###,##0.##}"
            :x:/@.lbl-text?value
        literal
          element:line
          class:x:/@.line-class?value
          x1:0
          y1:"{0:0.##}"
            :x:/@.line-y?value
          x2:165
          y2:"{0:0.##}"
            :x:/@.line-y?value

    /*
     * Decrementing our y position for our next line.
     */
    set:x:/@.line-y?value
      -:x:/@.line-y?value
        /:x:/@.zero-y?value
          _:5
    set:x:/@.lbl-text?value
      +:x:/@.lbl-text?value
        /:x:/@.max?value
          _:5

    /*
     * Changing CSS class of consecutive lines and labels.
     */
    set:x:/@.line-class?value
      src:line
    set:x:/@.label-class?value
      src:label

  /*
   * Figuring out width of each column, which depends upon how many items we have,
   * making sure we add some spacing.
   */
  .column-width
  set:x:/@.column-width?value
    +:double:-5
      /:double:160
        _:x:/../*/data/*?count

  /*
   * Adding all items as SVG rect widget to return widget, making sure
   * we keep track of current x position as we iterate through our items.
   */
  .cur-x:double:5
  for-each:x:/../*/data/*

    /*
     * Figuring out height of currently iterated value.
     */
    .height
    set:x:/@.height?value
      *:double:100
        /:x:/@_dp/#?value.double
          _:x:/@.chart-height?value

    /*
     * Keeping track of whether or not this is a negative value or not.
     */
    .negative:bool:false
    if:x:/@.height?value
      <:double:0
      set:x:/@.height?value
        *:x:/@.height?value
          _:-1
      set:x:/@.negative?value
        src:bool:true

    /*
     * Figuring out y position of currently iterated item.
     */
    .cur-y:0
    set:x:/@.cur-y?value
      -:double:100
        _:x:/@.height?value
    if:x:/@.negative?value
      =:bool:false

      /*
       * Subtracting size of negative axis from y position.
       */
      set:x:/@.cur-y?value
        -:x:/@.cur-y?value
          -:double:100
            _:x:/@.zero-y?value

    else

      /*
       * This is a negative value, making sure we add correct CSS class to item,
       * and move it according to it value along its correct y position.
       */
      set:x:/@.cur-y?value
        src:x:/@.zero-y?value
      set:x:/..for-each/*/add/**/literal/*/element/=rect/./*/class?value
        src:column negative

    /*
     * Checking if caller provided an explicit color for item.
     */
    if:x:/@_dp/#/*/color
      eval-x:x:/+/*/*
      add:x:/..for-each/*/add/*/*/literal
        src
          fill:x:/@_dp/#/*/color?value

    /*
     * Checking if caller explicitly does not want to add name labels.
     */
    if:x:/../*/name-labels?value
      =:bool:false

      /*
       * No name labels should be added.
       */
      set:x:/..for-each/*/add/*/*/foreignObject

    else

      /*
       * Name labels should be added, making sure we apply all arguments for item.
       */
      add:x:/..for-each/*/add/*/*/foreignObject/*/widgets/*/span
        src:x:/@_dp/#/*

      /*
       * Checking if caller supplied an [onclick] for item, at which point
       * we change item from span to a hyperlink.
       */
      if:x:/@_dp/#/*/onclick
        add:x:/..for-each/*/add/*/*/foreignObject/*/widgets/*/span
          src
            href:#
        set:x:/..for-each/*/add/*/*/foreignObject/*/widgets/*/span?name
          src:a

    /*
     * Adding rect (and possibly name labels) to return widget.
     */
    eval-x:x:/+/*/*/*|/+/**(/innerValue|/title)
    add:x:/../*/return/*/container/*/widgets/*/svg/*/widgets
      src
        literal
          element:rect
          class:column
          x:x:/@.cur-x?value
          y:x:/@.cur-y?value
          width:"{0:0.##}"
            :x:/@.column-width?value
          height:"{0:0.##}"
            :x:/@.height?value
        foreignObject
          class:name-label
          x:x:/@.cur-x?value
          y:104
          width:"{0:0.##}"
            :x:/@.column-width?value
          height:10
          widgets
            span
              innerValue:{0} ({1})
                :x:/@_dp/#?name
                :x:/@_dp/#?value
              title:{0} ({1})
                :x:/@_dp/#?name
                :x:/@_dp/#?value

    /*
     * Incrementing x value by width of column, plus size of "spacing".
     */
    set:x:/@.cur-x?value
      +:x:/@.cur-x?value
        _:x:/@.column-width?value
        _:5

  /*
   * Making additional room for labels, if necessary, depending upon how wide our
   * max label is.
   */
  length:"{0:###,###,##0.##}"
    :x:/@.max?value
  if:x:/@length?value
    >:int:12
    set:x:/../*/return/*/container/*/widgets/*/svg/*/viewbox?value
      src:-40 -20 210 130
  else-if:x:/@length?value
    >:int:10
    set:x:/../*/return/*/container/*/widgets/*/svg/*/viewbox?value
      src:-35 -20 205 130
  else-if:x:/@length?value
    >:int:7
    set:x:/../*/return/*/container/*/widgets/*/svg/*/viewbox?value
      src:-30 -20 200 130
  else-if:x:/@length?value
    >:int:5
    set:x:/../*/return/*/container/*/widgets/*/svg/*/viewbox?value
      src:-25 -20 195 130

  /*
   * Applying additional arguments.
   */
  add:x:/../*/return/*/container
    src:x:/@.signal/--/<-(!/class!/data)

  /*
   * Returning widget to caller.
   */
  eval-x:x:/+/*/*/class
  return
    container
      class:x:(/../*/class|/@.defaults/*/class)/$?value
      widgets
        svg
          viewbox:-20 -20 190 130
          widgets