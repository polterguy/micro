
/*
 * Creates the __[micro.lambda.contract.optional]__ Active Event.
 */

/*
 * Helper Active Event to verify expected optional _"contract"_ arguments are
 * given (correctly) to lambda object.
 *
 * Loops through the given lambda object, given as [_arg], and verifies that if the expected arguments
 * are found in lambda object, that it obeys by the rules for the contract.
 *
 * You can declare the expected type of your argument's value as the value of your contract
 * argument. You can also declare children nodes to your arguments, and such declare entire 
 * expected hierarchies of arguments.
 */
create-event:micro.lambda.contract.optional

  /*
   * Signal object to separate arguments from the rest of our lambda object.
   */
  .signal

  /*
   * Sanity checking invocation.
   */
  if:x:/../*/_arg?value
    not
    throw:You must pass in a node reference as [_arg] to check in your [micro.lambda.contract.optional] invocations

  /*
   * Looping through each argument given, and verifies that if found, it obeys by the ruling.
   */
  for-each:x:/@.signal/--(!/_arg)/<-

    /*
     * Checking if argument was supplied.
     */
    if:x:/../*/_arg/#/*/{0}
      :x:/@_dp/#?name

      /*
       * Checking if argument was supposed to hold a value (if given).
       *
       * Notice, we'll need to explicitly handle "bool" here, since it implicitly
       * converts into "false" if its value is "false".
       */
      if:x:/@_dp/#?value
        and:x:/@_dp/#?value
          !=:bool
        and:x:/../*/_arg/#/*/{0}?value
          :x:/@_dp/#?name
          not

        /*
         * Argument was expected to hold a value, but did not.
         */
        throw:Argument [{0}] did not have a value
          :x:/@_dp/#?name

      /*
       * Checking type of value, and that it can legally be converted into the expected type.
       */
      if:x:/@_dp/#?value
        !=:
        and
          p5.types.can-convert:x:/../*/_arg/#/*/{0}?value
            :x:/@_dp/#?name
            type:x:/@_dp/#?value
          not

        /*
         * Value of argument could not be converted into expected type.
         */
        throw:Argument [{0}] count not be converted into '{1}'
          :x:/@_dp/#?name
          :x:/@_dp/#?value

      /*
       * Recursively checking contract beneath currently iterated contract argument.
       *
       * Notice, we assume that all children arguments of currently iterated argument are mandatory.
       */
      add:x:/+
        src:x:/@_dp/#/*
      micro.lambda.contract.min:x:/../*/_arg/#/*/{0}
        :x:/@_dp/#?name
