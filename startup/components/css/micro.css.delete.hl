/*
 * Creates the __[micro.css.delete]__ Active Event.
 */

/*
 * This event allows you to delete CSS class(es) from one or more widgets.
 *
 * Pass in __[\_arg]__ as widget ID(s) and __[class]__ as CSS class(es)
 * you want to delete from widget.
 */
create-event:micro.css.delete

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    class:string
  micro.lambda.contract.optional:x:/..
    _arg:string

  /*
   * Splitting upon every given CSS class caller wants to delete.
   */
  split:x:/../*/class?value
    =:,
    =:" "
    trim:true

  /*
   * Looping through each widget provided.
   */
  for-each:x:/../*/_arg?value

    /*
     * Retrieving CSS class of specified widget.
     */
    get-widget-property:x:/@_dp?value
      class

    /*
     * Splitting each CSS class already in widget, such that we can figure out if class(es)
     * caller wants to delete actually exist on widget or not.
     */
    split:x:/@get-widget-property/*/*?value
      =:" "

    /*
     * Looping through each class supplied.
     */
    for-each:x:/../*/split/*/$?name

      /*
       * Checking if currently iterated CSS class already exist in [split] result.
       */
      if:x:/@split/*/{0}
        :x:/@_dp?value

        /*
         * Class exists, deleting it.
         */
        set:x:/@split/*/{0}
          :x:/@_dp?value

    /*
     * Invoking [join] on split results, before setting new class value.
     */
    join:x:/@split/*?name
      sep:" "
    set-widget-property:x:/@_dp?value
      class:x:/@join?value
