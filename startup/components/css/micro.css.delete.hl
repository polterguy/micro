
/*
 * Helper Active Event to delete CSS class(es) to one or more elements.
 *
 * Pass in [_arg] as widget ID and [class] as class(es) to delete on widget.
 */
create-event:micro.css.delete

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    _arg:string
    class:string

  /*
   * Splitting upon every given CSS class caller wants to delete.
   */
  split:x:/../*/class?value
    =:,
    =:" "
    trim:true

  /*
   * Retrieving CSS class of specified widget.
   */
  get-widget-property:x:/../*/_arg?value
    class

  /*
   * Splitting each CSS class already in widget, such that we can figure out if class(es)
   * caller wants to delete actually exist on widget or not.
   */
  split:x:/@get-widget-property/*/*?value
    =:" "

  /*
   * Looping through each class supplied.
   */
  for-each:x:/../*/split/[0,1]/*/$

    /*
     * Checking if currently iterated CSS class already exist in [split] result.
     */
    if:x:/@split/*/{0}
      :x:/@_dp/#?name

      /*
       * Class exists, deleting it.
       */
      set:x:/@split/*/{0}
        :x:/@_dp/#?name

  /*
   * Invoking [join] on split results, before setting new class value.
   */
  join:x:/@split/*?name
    sep:" "
  set-widget-property:x:/../*/_arg?value
    class:x:/@join?value
