
/*
 * Creates our __[micro.speech.speak]__ Active Event.
 */

/*
 * This event requires at the very least an __[\_arg]__ argument, being the text
 * to speak, in addition to optionally a __[voice]__, which defaults to _"en"_.
 *
 * The __[voice]__ argument can contain both a locale parts, and a named voice,
 * such as e.g. _"Veronica,en"_, which will use _"Veronica"_ voice, if it exists,
 * and is English. Otherwise, it'll default to the first _"en"_ (English) voice
 * it can find.
 *
 * Optionally supply __[pitch]__ and __[rate]__ to further parametrize the speech
 * utterance object on the client side.
 */
create-event:micro.speech.speak

  /*
   * Defaults if no argument(s) are supplied.
   */
  .defaults
    voice:en
    pitch:1.0
    rate:1.0

  /*
   * Making sure we check for mandatory arguments.
   */
  micro.lambda.contract.min:x:/..
    _arg:string

  /*
   * Optional arguments.
   */
  micro.lambda.contract.optional:x:/..
    onfinish
    pitch:decimal
    rate:decimal

  /*
   * Eliminating all carriage return sequences, to avoid JavaScript crash on the
   * client side.
   */
  set:x:/../*/_arg?value
    replace:x:/../*/_arg?value
      src:"`"

  /*
   * Making sure we include our JavaScript file.
   */
  p5.web.include-javascript-file:@MICRO/media/speak.js

  /*
   * Checking if we have an [onfinish] lambda callback, and if so, making sure
   * we are able to invoke it, by including an invisible widget on page, with
   * an Ajax callback, which is invoked when speak is done.
   */
  .extra:
  if:x:/../*/onfinish

    /*
     * Adding lambda callback into invisible callback event for widget.
     */
    add:x:/./*/create-literal-widget/*/.onfinish/*/.lambda
      src:x:/../*/onfinish/*

    /*
     * Creating widget.
     */
    create-literal-widget
      element:span
      style:"display:none !important;"
      .onfinish

        /*
         * Contains [onfinish] lambda, supplied during instantiation.
         */
        .lambda

        /*
         * Deletes widget, and invokes lambda callback, supplied during instantiation.
         */
        delete-widget:x:/../*/_event?value
        eval:x:/@.lambda

    /*
     * Creating JavaScript necessary to invoke callback once speak is finished.
     */
    set:x:/@.extra?value
      src:@"if (this._handle == true) {{p5.$('{0}').raise('.onfinish');}}"
        :x:/@create-literal-widget?value

  /*
   * Making sure we invoke client-side function that wraps our speech.
   */
  p5.web.send-javascript:@"p5.speech.speak(`{0}`, ""{1}"", function(){{{2}}}, {3}, {4});"
    :x:/../*/_arg?value
    :x:(/../*/voice|/@.defaults/*/voice)/$?value
    :x:/@.extra?value
    :x:(/../*/pitch|/@.defaults/*/pitch)/$?value
    :x:(/../*/rate|/@.defaults/*/rate)/$?value
