
/*
 * Creates the __[micro.page.minify-and-bundle-css-file]__ Active Event.
 */

/*
 * Will minify and bundle all specified CSS files,  and return path to minified 
 * version to caller.
 *
 * All bundles created this way, will be stored in _"/common/documents/public/micro-css-cache/"_,
 * and all relative URLs inside of the CSS file will be updated, and end up having an _"absolute path"_,
 * to avoid breaking relative references to for instance images and other _"url()"_ references.
 */
create-event:micro.page.minify-and-bundle-css-file

  /*
   * Signal node, to separate the arguments from the rest of our lambda.
   *
   * Also used to store all CSS file, as names of children nodes.
   */
  .signal

  /*
   * Looping through each CSS file supplied as arguments, and appending into
   * above [.signal] node.
   *
   * Notice, we explicitly unroll the path, before we use it to determine the hash value.
   */
  for-each:x:/../*/_arg?value
    add:x:/@.signal
      p5.io.unroll-path:x:/@_dp?value

  /*
   * Creating a SHA1 hash from all file path arguments, to have a unique filename for
   * our bundled CSS file.
   */
  p5.crypto.hash.create-sha1:x:/@.signal/*?name
    hex:true

  /*
   * Checking that our wrapper "bundle cache" folder exists, and creating it if it doesn't.
   */
  if
    fetch:x:/0/0?value
      folder-exists:/common/documents/public/micro-css-cache/
    not

    /*
     * Creating CSS cache folder.
     */
    create-folder:/common/documents/public/micro-css-cache/

  /*
   * Checking if wrapper file has already been created (and cached).
   */
  if
    fetch:x:/0/0?value
      file-exists:/common/documents/public/micro-css-cache/bundle-{0}.css
        :x:/@p5.crypto.hash.create-sha1?value
    not

    /*
     * Loading and minifying all CSS files, bundling the result into a single file, 
     * and saving it, using the hash value from above to get a unique filename for each
     * distinct bundle.
     *
     * Notice, we also make sure we correct any URLs in each CSS file, such that they become
     * absolute URLs, in order to have "url()" references and such map correctly.
     */
    load-file:x:/@.signal/*?name

    /*
     * Updating all URL references in CSS files.
     */
    for-each:x:/@load-file/*
      split:x:/@_dp/#?name
        =:/
      set:x:/@split/0/-
      join:x:/@split/*?name
        sep:/

      /*
       * Doing a regex replace of all "url()" references in JavaScript file.
       */
      set:x:/@_dp/#?value
        replace:x:/@_dp/#?value
          src:regex:/url\s*\('(?!http)/
          dest:url('/{0}/
            :x:/@join?value
      set:x:/@_dp/#?value
        replace:x:/@_dp/#?value
          src:regex:/url\s*\((?!http)(?!')/
          dest:url(/{0}/
            :x:/@join?value

    /*
     * Minifying CSS content, joining everything into one single file, and saving
     * the results to our "/common/public/" folder.
     */
    p5.web.css.minify:x:/@load-file/*?value
    join:x:/@p5.web.css.minify/*?value
    save-file:/common/documents/public/micro-css-cache/bundle-{0}.css
      :x:/@p5.crypto.hash.create-sha1?value
      src:x:/@join?value

  /*
   * Including minified (and bundled) resulting single CSS file on page.
   */
  p5.web.include-css-file:/common/documents/public/micro-css-cache/bundle-{0}.css
    :x:/@p5.crypto.hash.create-sha1?value
