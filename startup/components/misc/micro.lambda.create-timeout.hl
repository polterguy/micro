/*
 * Creates the __[micro.lambda.create-timeout]__ Active Event.
 */

/*
 * This event allows the user to invoke some piece of Hyperlambda on the server
 * some _'n'_ milliseconds from now.
 *
 * The event expects an __[onfinish]__ argument containing the lambda to be evaluated
 * once __[milliseconds]__ number of milliseconds have passed. This event will
 * inject a _"setTimeout"_ invocation on your client, which calls your server
 * after your __[milliseconds]__ have passed, evaluating your __[onfinish]__ lambda
 * object on the server.
 *
 * The timer is created as a hidden input element, with an associated Ajax
 * event, that is invoked through a `setTimeout` invocation. If you want to explicitly
 * name your timer, such that you can easily delete it using __[delete-widget]__ for
 * instance - You can accomplish this by giving your timer an explicit __[\_arg]__ value,
 * which will become the widget's ID. You can also control which parent this widget
 * is created within, by supplying a __[parent]__ argument - Which is useful if your
 * timer for instance is associated with some widget, such as a modal widget, and should
 * be _"automatically deleted"_ if its parent widget is deleted.
 */
create-event:micro.lambda.create-timeout

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    onfinish
    milliseconds:long
  micro.lambda.contract.optional:x:/..
    _arg
    parent:string

  /*
   * Passing in [onfinish] to [.lambda] node inside of our hidden Ajax event.
   */
  add:x:/../*/create-widget/*/.ondone/*/.lambda
    src:x:/../*/onfinish/*

  /*
   * Applying the (optional) [parent] argument.
   */
  add:x:/../*/create-widget
    src:x:/../*/parent

  /*
   * Then forward evaluating [_milliseconds], to make sure we are able
   * to know how many milliseconds from now we should invoke our [.onback].
   */
  eval-x:x:/+/*/oninit/*/_milliseconds
  create-widget:x:/../*/_arg?value
    element:input
    type:hidden
    .ondone

      /*
       * Deleting widget wrapping our Ajax event.
       */
      delete-widget:x:/../*/_event?value

      /*
       * Evaluating callback lambda specified during invocation.
       */
      .lambda
      eval:x:/@.lambda

    oninit

      /*
       * Creating our timeout function, that will invoke our Ajax event some 'n' seconds
       * from now.
       */
      _milliseconds:x:/../*/milliseconds?value
      p5.web.send-javascript:@"setTimeout(function(){{var el = p5.$('{0}');if (el.el != null){{el.raise('.ondone');}}}}, {1})"
        :x:/../*/_event?value
        :x:/@_milliseconds?value

