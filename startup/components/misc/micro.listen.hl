
/*
 * Creates our listen Active Event.
 *
 * Will initiate a speech recognition input object on the client, and invoking
 * the specified [onfinish] when some text has been captured, passing the the text
 * to your lambda as [text].
 *
 * Optionally pass in [lang] as language to capture. The default value for [lang]
 * is "en" implying English.
 */
create-event:micro.listen

  /*
   * Defaults if no argument(s) are supplied.
   */
  .defaults
    lang:en

  /*
   * Making sure we check for mandatory and optional arguments.
   */
  micro.lambda.contract.min:x:/..
    onfinish
  micro.lambda.contract.optional:x:/..
    lang:string

  /*
   * Making sure we include our JavaScript file.
   */
  p5.web.include-javascript-file:@MICRO/media/speak.js

  /*
   * Making sure we delete any previously created wrapper widgets, if existing.
   */
  if
    fetch:x:/0/0?value
      widget-exists:micro-speech-input
    delete-widget:micro-speech-input

  /*
   * Creating an invisible widget, which will invoke our callback, once any
   * speech has been captured.
   */
  add:x:/../*/create-literal-widget/*/.onfinish/*/.lambda
    src:x:/../*/onfinish/*
  create-literal-widget:micro-speech-input
    element:span
    style:"display:none !important;"
    .onfinish

      /*
       * Wraps our lambda callback, supplied during instantiation.
       */
      .lambda

      /*
       * Deleting widget, before we invoke lambda callback supplied during 
       * instantiation, passing in [text] to callback.
       */
      delete-widget:x:/../*/_event?value
      p5.web.post.get:micro-speech-recognized-text
      eval-x:x:/+/*
      eval:x:/@.lambda
        text:x:/@p5.web.post.get/*?value

  /*
   * No grammar, generic capture of word or phrase.
   */
  p5.web.send-javascript:@"p5.speak.listen('{0}');"
    :x:(/../*/lang|/@.defaults/*/lang)/$?value





/*
 * Stops speech recognition.
 */
create-event:micro.listen.stop
  p5.web.send-javascript:@"p5.speak.stop_listening();"
