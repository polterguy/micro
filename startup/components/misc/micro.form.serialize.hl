/*
 * Given a specific [_arg] widget, will recursively serialize all form elements beneath that element, 
 * and return in a uniform way to caller.
 *
 * Notice, if you give a widget a [.data-field] property, the returned name for your widget will be the value of your [.data-field] property.
 * If you use a [.data-field] with a grouped radio buttons collection, each radio button should also have a [.data-value].
 * This allows you to use automatic IDs, which is useful if you can't have unique IDs for your widget, while still returning your data for your
 * form in a semantically correct way, according to its data-field's name, instead of some randomly generated ID.
 */
create-event:micro.form.serialize

  /*
   * Figuring out [element] of widget, and handling accordingly.
   */
  get-widget-property:x:/../*/_arg?value
    element
  switch:x:/@get-widget-property/*/*?value

    /*
     * Input element, needs to handle all the different types accordingly.
     */
    case:input
      get-widget-property:x:/../*/_arg?value
        type
        .data-field
      switch:x:/@get-widget-property/*/*/type?value
        case:checkbox
          get-widget-property:x:/../*/_arg?value
            checked
          if:x:/@get-widget-property/*/*
            add:x:/..case/*/return
              src:@"{0}:bool:true"
                :x:(/..case/..case/*/get-widget-property/*/*/\.data-field|/../*/_arg)/[0,1]?value
          else
            add:x:/..case/*/return
              src:@"{0}:bool:false"
                :x:(/..case/..case/*/get-widget-property/*/*/\.data-field|/../*/_arg)/[0,1]?value
          return
        case:radio
          get-widget-property:x:/../*/_arg?value
            checked
            name
            value
            .data-value
          if:x:/@get-widget-property/*/*/checked
            add:x:/./*/return
              src:"{0}:{1}"
                :x:(/..case/..case/*/get-widget-property/*/*/\.data-field|/@get-widget-property/*/*/name)/[0,1]?value
                :x:(/@get-widget-property/*/*/\.data-value|/@get-widget-property/*/*/value)/[0,1]?value
            return
        default
          get-widget-property:x:/../*/_arg?value
            value
          add:x:/..default/*/return
            src:x:(/..case/*/get-widget-property/*/*/\.data-field|/../*/_arg)/[0,1]?value
          set:x:/..default/*/return/0?value
            src:x:/@get-widget-property/*/*?value
          return

    /*
     * Select and textarea widgets have (almost) the same logic.
     */
    case:textarea
    case:select
      get-widget-property:x:/../*/_arg?value
        value
        .data-field
      add:x:/..case/*/return
        src:x:(/..case/*/get-widget-property/*/*/\.data-field|/../*/_arg)/[0,1]?value
      set:x:/..case/*/return/0?value
        src:x:/@get-widget-property/*/*/value?value
      return

    /*
     * Any other type of element.
     */
    default
      p5.web.widgets.get-children:x:/../*/_arg?value
      for-each:x:/@p5.web.widgets.get-children/*/*?value
        micro.form.serialize:x:/@_dp?value
        add:x:/..default/*/return
          src:x:/@micro.form.serialize/*
      return
