/*
 * File responsible for initializing Micro.
 *
 * Creates three Active Events __[p5.io.unroll-path.@MICRO]__ - Which evaluates
 * to the _"/micro/"_ folder, and is used as a _"path variable"_.
 * In addition, it creates both of our __[micro.evaluate.xxx]__ events, one
 * called _"file"_ and another caller _"folder"_, which allows you to evaluate
 * a single Hyperlambda file, or evaluate all Hyperlambda files recursively
 * inside a specified folder.
 */


/*
 * Creates the _"path"_ Active Event that points to our _"/micro/"_ folder.
 */
split:x:/..?name
  =:/
set:x:/@split/0/-
join:x:/@split/*?name
  sep:/
eval-x:x:/+/*
create-event:p5.io.unroll-path.@MICRO
  return:/{0}
    :x:/@join?value





/*
 * This Active Event allows you to execute one or more Hyperlambda files.
 *
 * The Hyperlambda file(s) you wish to execute is given as __[\_arg]__.
 * All other arguments will be passed into your file(s) as arguments.
 */
create-event:micro.evaluate.file

  /*
   * Used as "signal object" to separate arguments from the rest of the lambda.
   */
  .signal

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    _arg:string

  /*
   * Loading up all files given as [_arg] arguments.
   */
  load-file:x:/@.signal/--/<-/_arg?value

  /*
   * Adding all arguments given to evaluation of file into [eval].
   */
  add:x:/../*/eval
    src:x:/@.signal/--(!/_arg)/<-

  /*
   * Evaluating [load-file]'s children, with the arguments applied in the above [add] invocation.
   */
  eval:x:/@load-file/*

  /*
   * Returning the results of the above evaluation to caller.
   */
  insert-after:x:/@.signal
    src:x:/@eval/*
  set:x:/..?value
    src:x:/@eval?value





/*
 * Evaluates all Hyperlambda files within the specified folder(s) recursively.
 *
 * The Hyperlambda folder(s) you wish to execute is given as __[\_arg]__.
 * All other arguments will be passed into your folders' files as they are being evaluated.
 */
create-event:micro.evaluate.folder

  /*
   * Used as "signal object" to separate arguments from the rest of the lambda.
   */
  .signal

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    _arg:string

  /*
   * Listing all Hyperlambda files in directories we're given.
   */
  list-files:x:/../*/_arg?value
    filter:.hl

  /*
   * Evaluating all Hyperlambda files from that folder, making sure we
   * pass in arguments given.
   */
  add:x:/+
    src:x:/@.signal/--(!/_arg)/<-
  micro.evaluate.file:x:/@list-files/*?name

  /*
   * Returning the results of the above evaluation to caller.
   */
  insert-after:x:/@.signal
    src:x:/@micro.evaluate.file/*
  set:x:/..?value
    src:x:/@eval?value

  /*
   * Listing all folders recursively, within the folder(s) we've just evaluated.
   */
  list-folders:x:/../*/_arg?value

  /*
   * If the above [list-folder] gave us any result(s), we recursively invoke self,
   * making sure we pass in the same arguments we were given.
   */
  if:x:/-/*
    add:x:/+
      src:x:/@.signal/--(!/_arg)/<-
    micro.evaluate.folder:x:/@list-folders/*?name





/*
 * Evaluates all Hyperlambda files recursively within the "@MICRO/startup/" folder.
 */
micro.evaluate.folder:@MICRO/startup/
